[["index.html", "Vikings Project Abstract", " Vikings Project Andrea Del Cortona1 2023-03-21 Abstract Beer yeast has undergone extensive domestication throughout history reinforcing desirable traits such as malt sugar utilization, and a lack of off-flavor production within these strains. In particular the advent of refrigeration, and single strain isolation in the late nineteenth century, while leading to an increase in product quality and reliability, also led to an overall loss in beer strain diversity (Gallone Nature E&amp;E 2019). Recent demand for increased diversity ??? flavor, styles, but also efficiency &amp; technological improvements. Traditionally fermentation sources offer additional diversity ??? in particular farmhouse ales have undergone some level of phenotypic selection ??? lack of phenolic off flavors and sugar utilization ??? but show increased diversity of additional traits including temperature tolerance and fermentation speed. We isolated &gt;1200 single colonies from 28 farmhouse ale cultures to investigate population diversity. From these we selected ~180 diverse strains for phenotypic screening for stress resistance, fermentation performance and flavor production. From these a further 20 were selected for whole genome sequencing and phylogenetic analysis. Further, a small selection of strains were chosen for their potential in more efficient high-temperature pseudo-lager beer production and taken to pilot scale fermentation and sensorially assessed by a tasting panel. andrea.delcortona@gmail.com "],["qc-and-genome-composition-assessment.html", "Chapter 1 QC and Genome Composition assessment 1.1 Reads QC and Filtering 1.2 Genome Composition 1.3 Ploydies estimation", " Chapter 1 QC and Genome Composition assessment 1.1 Reads QC and Filtering Just trim low quality bases with Trimmomatic and discard short reads. I keep only properly paired reads and I discard the unpaired, since the latter are just a tiny fraction of my total data, they complicate the analysis and there is not much added value in them (at least for the analysis we run). The file sample.lst just contains the names of my kveiks samples. # generate FastQC report for file in *.fastq; do ~/bin/FastQC/fastqc $file &amp; done # LowQ base trimming and filtering while read line; do java -jar ~/bin/trimmomatic/trimmomatic.jar PE \\ -threads 72 \\ -phred33 \\ $line.R1.fq.gz $line.R2.fq.gz \\ $line.R1.tr.fq.gz $line.R1.tr.un.fq.gz $line.R2.tr.fq.gz $line.R2.tr.un.fq.gz \\ SLIDINGWINDOW:10:30 \\ TRAILING:30 \\ MINLEN:50 done &lt; sample.lst 1.2 Genome Composition We check the composition of the sequenced kveiks by aligning the reads to a set of Saccharomyces reference genomes. Table 1.1: Yeast Reference Genomes Species Genome Accession Label S. cerevisiae S288C_R64-2-1 Scere S. eubayanus GCF_001298625.1 Seuba S. kudriavzevi gca_000167075 Skudr S. mikatae SRX055454 Smika S. paradoxus ASM207914v1 Spara S. uvarum ASM224264v1 Suvar First, we align the reads to the six Saccharomyces reference genomes. Then we create 10kb windows with bedtools and we calculate the average coverage for each window. ## index the reference genome ~/bin/bwa/bwa index Saccharomyces_RefGen.fa ## reads alignment while read line ; do bwa mem -t 72 \\ -K 100000000 \\ Saccharomyces_RefGen.fa \\ &quot;${line}&quot;.R1.tr.fq.gz &quot;${line}&quot;.R2.tr.fq.gz \\ &gt; &quot;${line}&quot;.align.sam samtools view -@ 72 -Sb \\ &quot;${line}&quot;.align.sam &gt; &quot;${line}&quot;.align.bam samtools sort -@ 72 &quot;${line}&quot;.align.bam &quot;${line}&quot;.align.sort done &lt; ../sample.lst ## bam2bed # prepare reference genomes samtools-1.9/samtools faidx Saccharomyces_RefGen.fa gatk CreateSequenceDictionary --R Saccharomyces_RefGen.fa cut -f 2,3 Saccharomyces_RefGen.dict \\ | tail -n +2 \\ | sed &#39;s/LN://g&#39; \\ | sed &#39;s/SN://g&#39; \\ &gt; Saccharomyces_RefGen.bedchor bedtools makewindows -g Saccharomyces_RefGen.bedchor \\ -w 1000 &gt; Saccharomyces_RefGen.1kb_win.tab # calculate mean coverage while read line; do bedtools coverage -a Saccharomyces_RefGen.1kb_win.tab \\ -b &quot;${line}&quot;.align.sort.bam -mean &gt; &quot;${line}&quot;.align.sort.1kb_cov.bed; done # format output for file in *.1kb_cov.bed ; do sed -i &#39;s/Scere_/Scere\\t/g&#39; $file; sed -i &#39;s/Seuba_/Seuba\\t/g&#39; $file; sed -i &#39;s/Skudr_/Skudr\\t/g&#39; $file; sed -i &#39;s/Smika_/Smika\\t/g&#39; $file; sed -i &#39;s/Spara_/Spara\\t/g&#39; $file; sed -i &#39;s/Suvar_/Suvar\\t/g&#39; $file; python bed_remove0coverage.py --input $file |\\ sed &#39;/^[[:space:]]*$/d&#39; &gt; $(basename $file .bed).no0.bed; done for file in *.no0.bed; do NAME=$(basename $file .align.sort.1kb_cov.no0.bed); sed -i &quot;s/^/$NAME\\t/&quot; $file; done cat *.1kb_cov.no0.bed &gt; Viking.species.cov.bed # generate per chromosomes coverages while read line; do OLD=$(echo $line | cut -d &quot; &quot; -f 1) NEW=$(echo $line | cut -d &quot; &quot; -f 2) sed -i &quot;s/$OLD\\t/$NEW\\t/g&quot; Viking.species.cov.chr.bed done &lt; ref_chr_names.lst # clean output for file in *.no0.bed; do cp $file $file.1; while read line; do OLD=$(echo $line | cut -d &quot; &quot; -f 1); NEW=$(echo $line | cut -d &quot; &quot; -f 2); sed -i &quot;s/$OLD\\t/$NEW\\t/g&quot; $file.1; done &lt; ../00_ref_genomes/ref_chr_names.lst; grep Chr $file.1 &gt; $(basename $file .bed).chr.bed; rm $file.1 &amp; done We then remove windows with 0 coverage to have a clearer figure, and we plot the coverages with transforming the y axis in log10 scale, since Krogerus kveiks have much higher coverage than the strains we sequenced. data_cov = read.delim(paste(mainDir, &quot;Viking.species.cov.chr.bed&quot;, sep = &quot;&quot;), header = FALSE) data_cov$V7 = ifelse(data_cov$V6 &gt;= 1, &quot;Up&quot;, &quot;Down&quot;) # ylim = 1500 ggplot(data_cov, aes(x = V2, y = V6)) + geom_jitter(aes(color = V7), show.legend = FALSE, alpha = 0.035, shape = &quot;.&quot;, position = position_jitter(0.475)) + geom_hline(yintercept = 1, linetype = 2, color = &quot;red&quot;) + coord_cartesian(expand = FALSE) + scale_color_manual(values = c(&quot;grey75&quot;, &quot;cyan4&quot;)) + scale_y_continuous(limits = c(-4, 9000), trans = &quot;log2&quot;, breaks = c(1, 10, 100, 1000), labels = scales::comma) + labs(title = &quot;Coverage of Reference Genomes&quot;, x = &quot;Reference Species&quot;, y = &quot;Coverage&quot;) + facet_wrap(~V1, scales = &quot;free_y&quot;) + theme(plot.title = element_text(hjust = 0.5, size = 20), panel.background = element_blank(), panel.grid.major.x = element_blank(), panel.grid.major.y = element_line(colour = &quot;gray75&quot;, size = 0.5), strip.background = element_rect(colour = &quot;black&quot;, fill = NA), strip.text = element_text(size = 8), axis.ticks.y = element_blank(), axis.text.x = element_text(angle = 90, vjust = 0.65)) Figure 1.1: Coverage of Reference Genomes All sequenced farmhouse yeasts are pure S. cerevisiae strains, except for Muri and k7R25 that are S. cerevisiae, S. eubayanus and S. uvarum triple hybrids. We can dig in into the coverage of the single chromosomes and visualize the extent of hybridization and eventual aneuploidies. ### PER SAMPLE COVERAGE sample_list = unique(data_cov$V1) r = list() # I iterate through the samples for (i in 1:length(sample_list)){ # I read the sample name and restrict the plot to that sample name = sample_list[i] file = paste(mainDir, &quot;/01_start_bed/&quot;,name,&quot;.align.sort.1kb_cov.no0.chr.bed&quot;, sep = &quot;&quot;) dataset = read.delim(file, header = FALSE) # plot p = ggplot(dataset, aes(V5, V6, colour = V2)) + geom_point(size = 0.2) + scale_y_continuous(limits = c(1.5, 9000), trans = &quot;log2&quot;, breaks = c(1, 10, 100, 1000), labels = scales::comma) + scale_x_discrete(breaks = (seq(0,2e6,10000))) + coord_cartesian(expand = FALSE) + facet_grid(V2~dataset$V3, scales = &quot;free&quot;, space = &quot;free_x&quot;, switch = &quot;y&quot;) + labs(title = name, x = &quot;Chromosome&quot;, y = &quot;Genome coverage&quot;, color = &quot;Genomes&quot;) + theme(plot.title = element_text(hjust = 0.5, size = 20), legend.position = &quot;none&quot;, panel.background = element_blank(), panel.spacing.x = unit(0, &quot;lines&quot;), panel.border = element_rect(colour = &quot;black&quot;, size = 1, fill = NA), strip.background = element_rect(colour = &quot;black&quot;, size = 1, fill = NA)) r[[name]] = p if(name %in% c(&quot;14R30&quot;, &quot;Muri&quot;, &quot;k7R25&quot;)){ print(p) } } Figure 1.2: Sub-genomes coverages Figure 1.3: Sub-genomes coverages Figure 1.4: Sub-genomes coverages Muri and k7R25 are triple hybrids S. cerevisiae X S. eubayanus X S. uvarum. What is extremely interesting is that they share the same genomic composition in terms of origin of the chromosomes, but they have distinct CNVs patterns. I would suggest a common origin for such hybrid. 1.3 Ploydies estimation We can estimates Kveiks ploidy by looking at the k-mer frequency distributions of the sequenced reads obtained from whole genome sequencing. # calculate kmer freq for file in 01_alignments/*bam; do ~/bin/ntCard/bin/ntcard --threads=64 --kmer=41 \\ --pref=$(basename $file .align.sort.md.r.bam).kmer41freq $file; done # merge outputs for file in *.hist; do tail -n +3 $file &gt; $file.1; mv $file.1 $file; cat $file | sed &quot;s/^/$(basename $file .kmer41freq_k41.hist)\\t/g&quot;; done &gt; Viking.species.kmer41freq.txt Kmer frequency distribution plots can suggest us the degree of heterozygosity of kveiks genomes. All Kveiks seems to have a high degree of heterozygosity, except for hybrid strains Muri and k7R25. This support the idea that the sequenced kveiks so far are tetraploid S. cerevisiae, while Muri and k7R25 are triploid hybrids S. cerevisiae X Seubayanus X S. uvarum. data_k = read.delim(paste(mainDir, &quot;Viking.species.kmer41freq.mod.txt&quot;, sep = &quot;&quot;), header = FALSE) data_k$V2 = as.numeric(data_k$V2) data_k$V3 = as.numeric(data_k$V3) # plot kmer distributions ggplot(data_k, aes(x = V2, y = V3)) + geom_line(color = &quot;steelblue&quot;, size = 1) + scale_y_continuous(labels = function(x) format(x, big.mark = &quot;,&quot;, scientific = FALSE)) + facet_wrap(~V1, scales = &quot;free&quot;) + labs(title = &quot;K-mer frequencies distribution&quot;, x = &quot;k-mer depth&quot;, y = &quot;k-mer frequency&quot;) + theme(plot.title = element_text(size = 20, hjust = 0.5), axis.title = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), panel.background = element_blank(), panel.border = element_rect(colour = &quot;black&quot;, fill = NA), strip.background = element_rect(colour = &quot;black&quot;, fill = NA), strip.text = element_text(size = 8)) Figure 1.5: K-mer frequencies distribution We compare the predicted ploidy results with the ones of 18 S. cerevisiae industrial strains that will be used across this whole study as comparison. data_ay = read.delim(paste(mainDir, &quot;additional_yeasts.kmer41freq.txt&quot;, sep = &quot;&quot;), header = FALSE) data_ay$V2 = as.numeric(data_ay$V2) data_ay$V3 = as.numeric(data_ay$V3) data_ay$V4 = ifelse(data_ay$V1 == &quot;X1002&quot; | data_ay$V1 == &quot;X1014&quot; | data_ay$V1 == &quot;X1018&quot; | data_ay$V1 == &quot;X1030&quot; | data_ay$V1 == &quot;X1129&quot; | data_ay$V1 == &quot;X5508&quot;, &quot;Beer1&quot;, ifelse(data_ay$V1 == &quot;X1005&quot; | data_ay$V1 == &quot;X1007&quot; | data_ay$V1 == &quot;X1118&quot; | data_ay$V1 == &quot;X1131&quot; | data_ay$V1 == &quot;X1148&quot; | data_ay$V1 ==&quot;x7078-B&quot;, &quot;Beer2&quot;, &quot;Wine&quot;)) data_ay$V1 = factor(data_ay$V1, levels = c(&quot;X1002&quot;, &quot;X1014&quot;, &quot;X1018&quot;, &quot;X1030&quot;, &quot;X1129&quot;, &quot;X5508&quot;, &quot;X1005&quot;, &quot;X1007&quot;, &quot;X1118&quot;, &quot;X1131&quot;, &quot;X1148&quot;, &quot;x7078-B&quot;, &quot;X1046&quot;, &quot;X4009&quot;, &quot;X4037&quot;, &quot;X4040&quot;, &quot;X4042&quot;, &quot;X4051&quot;)) # plot kmer distributions ggplot(data_ay, aes(x = V2, y = V3)) + geom_line(aes(color = V4), size = 1) + scale_y_continuous(labels = function(x) format(x, big.mark = &quot;,&quot;, scientific = FALSE)) + xlim(10, 200) + ylim(0, 515000) + facet_wrap(~V1, scales = &quot;free&quot;, ncol = 6) + labs(title = &quot;K-mer frequencies distribution&quot;, colour = &quot;Industrial\\n niche&quot;, x = &quot;k-mer depth&quot;, y = &quot;k-mer frequency&quot;) + theme(plot.title = element_text(size = 20, hjust = 0.5), axis.title = element_text(size = 18), axis.ticks.y = element_blank(), axis.text.y = element_blank(), panel.background = element_blank(), panel.border = element_rect(colour = &quot;black&quot;, fill = NA), strip.background = element_rect(colour = &quot;black&quot;, fill = NA), strip.text = element_text(size = 8)) Figure 1.6: K-mer frequencies distribution Industrail strains "],["copy-number-variants.html", "Chapter 2 Copy Number Variants 2.1 Call CNVs 2.2 Identify common CNVs in Farmhouse yeasts 2.3 CNV Functional Enrichment", " Chapter 2 Copy Number Variants To detect Copy Number Variants (CNVs) and major aneuploidies, we use the CNVnator pipeline. We use the bam files containing informations on aligned reads to the reference S288C genome, and we call CNVs based on changes of depth of mapped reads. The protocol we follow is: For each sample, run CNVnator for 500 bp and 1,000 bp bins; Retain only CNVs that are concordant for both bins; Identify common CNVs pattern; Identify genes affected by CNVs; GO, KEGG and Reactome pathways enrichment 2.1 Call CNVs First, we call CNVs with CNVnator, using 500 bp and 1,000 bp bins. Then, for each samples, we retain only CNVs that have been called with both bins, and that had a p-value &lt; 0.05. # prepare reference genome while read line; do if [[ ${line:0:1} == &#39;&gt;&#39; ]]; then outfile=${line#&gt;}.fa; echo $line &gt; $outfile; else echo $line &gt;&gt; $outfile; fi; done &lt; Saccharomyces_RefGen.fa #run CNVnator from the docker image chmod 777 09_CNVs/ for file in *.bam; do NAME=$(basename $file .S288C.align.sort.md.r.bam); docker run -v /home/andrea/03_KVEIK/09_CNVs/:/data wwliao/cnvnator cnvnator \\ -root ./out.&quot;${NAME}&quot;.root \\ -genome ./00_refgen/Saccharomyces_cerevisiae.EF4.73.dna.chromosome.all.fa \\ -tree $file; for BIN in 20 100 500 1000; do docker run -v /home/andrea/03_KVEIK/09_CNVs/:/data wwliao/cnvnator cnvnator \\ -root ./out.&quot;${NAME}&quot;.root \\ -genome ./00_refgen/Saccharomyces_cerevisiae.EF4.73.dna.chromosome.all.fa \\ -his $BIN -d ./; docker run -v /home/andrea/03_KVEIK/09_CNVs/:/data wwliao/cnvnator cnvnator \\ -root ./out.&quot;${NAME}&quot;.root \\ -stat $BIN; docker run -v /home/andrea/03_KVEIK/09_CNVs/:/data wwliao/cnvnator cnvnator \\ -ngc \\ -root ./out.&quot;${NAME}&quot;.root \\ -partition $BIN; docker run -v /home/andrea/03_KVEIK/09_CNVs/:/data wwliao/cnvnator cnvnator \\ -ngc \\ -root ./out.&quot;${NAME}&quot;.root \\ -call $BIN &gt; &quot;${NAME}&quot;.CNV_&quot;${BIN}&quot;bin.tab; done; done chmod 755 09_CNVs/ # Filter CNVs and merge 500bp 1000bp windows while read line; do python3.5 ~/CNVnator_merger.py \\ --input_1 $line.CNV_500bin.tab \\ --input_2 $line.CNV_1000bin.tab \\ --sample $line &gt; $line.CNVmerged.500-1000.tab; done &lt; ../sample.lst cat *merged.500-1000.tab &gt; Vikings.plusadditional.CNVsmerged.all.tab Then we plot the CNV that we have identified, and we compare them with the CNVs in the additional industrial yeasts from Table @ref(tab:add_yeasts). To facilitate the visualization, duplications have been amplified up to 10X, while deletion have been reduced to 1X. Farmhouse yeasts have been clustered based on their geographical origin, in order from the top to the bottom: North-West Norway; South-West Norway; Central-Eastern Norway; Latvia; Lithuania; Russia. # upload files V_CNVs_1000 = read.delim(paste(mainDir, &quot;Vikings.CNVsmerged.all.mod.tab&quot;, sep = &quot;&quot;), header = FALSE) # reformat data V_CNVs_1000$V2 = factor(V_CNVs_1000$V2, levels = c(&quot;I&quot;, &quot;II&quot;, &quot;III&quot;, &quot;IV&quot;, &quot;V&quot;, &quot;VI&quot;, &quot;VII&quot;, &quot;VIII&quot;, &quot;IX&quot;, &quot;X&quot;, &quot;XI&quot;, &quot;XII&quot;, &quot;XIII&quot;, &quot;XIV&quot;, &quot;XV&quot;, &quot;XVI&quot;, &quot;Mito&quot;)) # group kveiks by geographical origin V_CNVs_1000$V1 = factor(V_CNVs_1000$V1, levels = c(&quot;41R10&quot;, &quot;21R38&quot;, &quot;9R40&quot;, &quot;17P5&quot;, &quot;SortdalEbbe1&quot;, &quot;3R11&quot;, &quot;21P1&quot;, &quot;41R15&quot;, &quot;Hornindal1&quot;, &quot;Hornindal2&quot;, &quot;1R16&quot;, &quot;2R23&quot;, &quot;8R19&quot;, &quot;Muri&quot;, &quot;k7R25&quot;, &quot;38R16&quot;, &quot;44R32&quot;, &quot;19R18&quot;, &quot;44R7&quot;, &quot;6R15&quot;, &quot;Laerdal2&quot;, &quot;7R7&quot;, &quot;14R6&quot;, &quot;14R30&quot;, &quot;27R17&quot;, &quot;28P1&quot;, &quot;28P6&quot;, &quot;28R21&quot;, &quot;28R33&quot;, &quot;28R8&quot;, &quot;42R20&quot;, &quot;42R31&quot;, &quot;45P5&quot;, &quot;45R11&quot;, &quot;46R12&quot;, &quot;46R37&quot;, &quot;16R23&quot;, &quot;16R37&quot;, &quot;39R20&quot;, &quot;40R14&quot;, &quot;40R1&quot;, &quot;40R20&quot;, &quot;Granvin1&quot;, &quot;Voss1&quot;)) # plot p = ggplot(V_CNVs_1000) + geom_rect(aes(xmin = V3, xmax = V4, ymin = V5, ymax = V6, fill = V8), color=&quot;black&quot;, size = 0.001) + scale_fill_gradient2(midpoint = 0, low = &quot;#84ceff&quot;, mid = &quot;white&quot;, high = &quot;#ffb584&quot;, limits = c(0.1, 10), na.value = &quot;grey75&quot;, trans = &quot;log&quot;) + facet_grid(V1~V2, scales = &quot;free&quot;, space = &quot;free_x&quot;) + labs(title = &quot;CNVs Distribution: 500-1,000 bp bin&quot;, fill = &quot;log10 ReadDepth&quot;) + theme(plot.title = element_text(size = 28, hjust = 0.5), axis.ticks = element_blank(), axis.title = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank(), legend.position = &quot;none&quot;, panel.background = element_blank(), panel.spacing.x = unit(0.05, &quot;lines&quot;), panel.spacing.y = unit(0.05, &quot;lines&quot;), panel.border = element_rect(colour = &quot;black&quot;, fill = NA), strip.background = element_rect(colour = &quot;black&quot;, fill = &quot;grey90&quot;), strip.text.x = element_text(size = 10), strip.text.y = element_text(size = 14, angle = 0)) # change facet colors g = ggplot_gtable(ggplot_build(p)) stripr = which(grepl(&quot;strip-r&quot;, g$layout$name)) fills = c(&quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#92C5DE&quot;, &quot;#92C5DE&quot;, &quot;#92C5DE&quot;, &quot;#92C5DE&quot;, &quot;#92C5DE&quot;, &quot;#92C5DE&quot;, &quot;#92C5DE&quot;, &quot;#92C5DE&quot;, &quot;#92C5DE&quot;, &quot;#92C5DE&quot;, &quot;#008470&quot;, &quot;#008470&quot;, &quot;#008470&quot;, &quot;#008470&quot;, &quot;#008470&quot;, &quot;#008470&quot;, &quot;#FFDA00&quot;, &quot;#FFDA00&quot;, &quot;#FFDA00&quot;, &quot;#FFDA00&quot;, &quot;#FBA01D&quot;, &quot;#FBA01D&quot;, &quot;#FBA01D&quot;, &quot;#FBA01D&quot;, &quot;#A6611A&quot;, &quot;#A6611A&quot;, &quot;#A6611A&quot;, &quot;#A6611A&quot;, &quot;grey75&quot;, &quot;grey75&quot;) k = 1 for (i in stripr) { j = which(grepl(&quot;rect&quot;, g$grobs[[i]]$grobs[[1]]$childrenOrder)) g$grobs[[i]]$grobs[[1]]$children[[j]]$gp$fill = fills[k] k = k + 1 } grid::grid.draw(g) Figure 2.1: Copy Number Variants in farmhouse yeasts Lets now compare the CNVs identified in farmhouse yeasts with the ones identified in the selected industrial strains. # upload files V_CNVs_1000 = read.delim(paste(mainDir, &quot;Vikings.plusadditional.CNVsmerged.all.mod.tab&quot;, sep = &quot;&quot;), header = FALSE) # reformat data V_CNVs_1000$V2 = factor(V_CNVs_1000$V2, levels = c(&quot;I&quot;, &quot;II&quot;, &quot;III&quot;, &quot;IV&quot;, &quot;V&quot;, &quot;VI&quot;, &quot;VII&quot;, &quot;VIII&quot;, &quot;IX&quot;, &quot;X&quot;, &quot;XI&quot;, &quot;XII&quot;, &quot;XIII&quot;, &quot;XIV&quot;, &quot;XV&quot;, &quot;XVI&quot;, &quot;Mito&quot;)) # group kveiks by geographical origin V_CNVs_1000$V1 = factor(V_CNVs_1000$V1, levels = c(&quot;41R10&quot;, &quot;21R38&quot;, &quot;9R40&quot;, &quot;17P5&quot;, &quot;SortdalEbbe1&quot;, &quot;3R11&quot;, &quot;21P1&quot;, &quot;41R15&quot;, &quot;Hornindal1&quot;, &quot;Hornindal2&quot;, &quot;1R16&quot;, &quot;2R23&quot;, &quot;8R19&quot;, &quot;Muri&quot;, &quot;k7R25&quot;, &quot;38R16&quot;, &quot;44R32&quot;, &quot;19R18&quot;, &quot;44R7&quot;, &quot;6R15&quot;, &quot;Laerdal2&quot;, &quot;7R7&quot;, &quot;14R6&quot;, &quot;14R30&quot;, &quot;27R17&quot;, &quot;28P1&quot;, &quot;28P6&quot;, &quot;28R21&quot;, &quot;28R33&quot;, &quot;28R8&quot;, &quot;42R20&quot;, &quot;42R31&quot;, &quot;45P5&quot;, &quot;45R11&quot;, &quot;46R12&quot;, &quot;46R37&quot;, &quot;16R23&quot;, &quot;16R37&quot;, &quot;39R20&quot;, &quot;40R14&quot;, &quot;40R1&quot;, &quot;40R20&quot;, &quot;Granvin1&quot;, &quot;Voss1&quot;, &quot;X1002&quot;, &quot;X1014&quot;, &quot;X1018&quot;, &quot;X1030&quot;, &quot;X1129&quot;, &quot;X5508&quot;, &quot;X1005&quot;, &quot;X1007&quot;, &quot;X1118&quot;, &quot;X1131&quot;, &quot;X1148&quot;, &quot;X7078-B&quot;, &quot;X1046&quot;, &quot;X4009&quot;, &quot;X4037&quot;, &quot;X4040&quot;, &quot;X4042&quot;, &quot;X4051&quot;)) # plot p = ggplot(V_CNVs_1000) + geom_rect(aes(xmin = V3, xmax = V4, ymin = V5, ymax = V6, fill = V8), color=&quot;black&quot;, size = 0.001) + scale_fill_gradient2(midpoint = 0, low = &quot;#84ceff&quot;, mid = &quot;white&quot;, high = &quot;#ffb584&quot;, limits = c(0.1, 10), na.value = &quot;grey75&quot;, trans = &quot;log&quot;) + facet_grid(V1~V2, scales = &quot;free&quot;, space = &quot;free_x&quot;) + labs(title = &quot;CNVs Distribution: 500-1,000 bp bin&quot;, fill = &quot;log10 ReadDepth&quot;) + theme(plot.title = element_text(size = 28, hjust = 0.5), axis.ticks = element_blank(), axis.title = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank(), legend.position = &quot;none&quot;, panel.background = element_blank(), panel.spacing.x = unit(0.05, &quot;lines&quot;), panel.spacing.y = unit(0.05, &quot;lines&quot;), panel.border = element_rect(colour = &quot;black&quot;, fill = NA), strip.background = element_rect(colour = &quot;black&quot;, fill = &quot;grey90&quot;), strip.text.x = element_text(size = 10), strip.text.y = element_text(size = 14, angle = 0)) # change facet colors g = ggplot_gtable(ggplot_build(p)) stripr = which(grepl(&quot;strip-r&quot;, g$layout$name)) fills = c(&quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#92C5DE&quot;, &quot;#92C5DE&quot;, &quot;#92C5DE&quot;, &quot;#92C5DE&quot;, &quot;#92C5DE&quot;, &quot;#92C5DE&quot;, &quot;#92C5DE&quot;, &quot;#92C5DE&quot;, &quot;#92C5DE&quot;, &quot;#92C5DE&quot;, &quot;#008470&quot;, &quot;#008470&quot;, &quot;#008470&quot;, &quot;#008470&quot;, &quot;#008470&quot;, &quot;#008470&quot;, &quot;#FFDA00&quot;, &quot;#FFDA00&quot;, &quot;#FFDA00&quot;, &quot;#FFDA00&quot;, &quot;#FBA01D&quot;, &quot;#FBA01D&quot;, &quot;#FBA01D&quot;, &quot;#FBA01D&quot;, &quot;#A6611A&quot;, &quot;#A6611A&quot;, &quot;#A6611A&quot;, &quot;#A6611A&quot;, &quot;grey75&quot;, &quot;grey75&quot;, &quot;#51CD34&quot;, &quot;#51CD34&quot;, &quot;#51CD34&quot;, &quot;#51CD34&quot;, &quot;#51CD34&quot;, &quot;#51CD34&quot;, &quot;#2E97E6&quot;, &quot;#2E97E6&quot;, &quot;#2E97E6&quot;, &quot;#2E97E6&quot;, &quot;#2E97E6&quot;, &quot;#2E97E6&quot;, &quot;#F2BA00&quot;, &quot;#F2BA00&quot;, &quot;#F2BA00&quot;, &quot;#F2BA00&quot;, &quot;#F2BA00&quot;, &quot;#F2BA00&quot;, &quot;#F2BA00&quot;, &quot;#F2BA00&quot;) k = 1 for (i in stripr) { j = which(grepl(&quot;rect&quot;, g$grobs[[i]]$grobs[[1]]$childrenOrder)) g$grobs[[i]]$grobs[[1]]$children[[j]]$gp$fill = fills[k] k = k + 1 } grid::grid.draw(g) Figure 2.2: Copy Number Variants in farmhouse yeasts VS industrial strains While there is no clear signature associated with kveiks geographic origin, it looks like there are common CNVs shared between farmhouse yeasts that are instead absent in industrial yeasts. Lets clearly identify them. There are the apparent trends: 5 out of 69 CNVs are shared among all Kveiks Granvin1, Hornindal1, Hornindal2, Voss1 have similar CNV fingerprint 2.2 Identify common CNVs in Farmhouse yeasts We have a bunch of CNVs called on 44 different kveiks Some CNVs that are called on the same position on multiple samples, maybe differs for few hundred base pairs. To identify the average conserved CNV, we use a custom python script that collapse this windows, a sort of ad hoc bedtools merge for CNVs positions. # generate overlapping windows for i in &quot;\\tI\\t&quot; &quot;\\tII\\t&quot; &quot;\\tIII\\t&quot; &quot;\\tIV\\t&quot; &quot;\\tV\\t&quot; &quot;\\tVI\\t&quot; &quot;\\tVII\\t&quot; \\ &quot;\\tVIII\\t&quot; &quot;\\tIX\\t&quot; &quot;\\tX\\t&quot; &quot;\\tXI\\t&quot; &quot;\\tXII\\t&quot; &quot;\\tXIII\\t&quot; &quot;\\tXIV\\t&quot; \\ &quot;\\tXV\\t&quot; &quot;\\tXVI\\t&quot; &quot;\\tMito\\t&quot;; do grep -P &quot;${i}&quot; Vikings.CNVsmerged.all.tab \\ | cut -f 2-4 \\ | sort -u \\ | sort -k2,2n; done &gt; temp.bed; bedtools merge -i temp.bed &gt; Vikings.CNVsmerged.all.bed; rm temp.bed; python3.8 Vikings.overlapCNVs.py --allCNVs Vikings.CNVsmerged.all.tab \\ &lt;!-- --bed Vikings.CNVsmerged.all.bed \\ --&gt; &gt; Vikings.CNVsmerged.all.matrix.tab Lets check the CNVs distributions: Lets select CNVs present in at least 90% (N=40) of the sequenced farmhouse yeasts, and plot them. There are 11 CNVs shared between 40 farmhouse yeasts or more. # create CNV matrix for the heatmap matrix_heat = as.matrix(matrix.d75[, c(4:ncol(matrix.d75))]) matrix_heat = ifelse(matrix_heat &lt; 1, -1, ifelse(matrix_heat &gt; 1, 1, matrix_heat)) rownames(matrix_heat) = tidyr::unite(matrix.d75, &quot;&quot;, c(1, 2, 3), sep = &quot;-&quot;)[, 1] rownames(matrix_heat) = stringr::str_replace(rownames(matrix_heat), &quot;I-&quot;, &quot;I:&quot;) rownames(matrix_heat) = stringr::str_replace(rownames(matrix_heat), &quot;X-&quot;, &quot;X:&quot;) rownames(matrix_heat) = stringr::str_replace(rownames(matrix_heat), &quot;V-&quot;, &quot;V:&quot;) # create annotations kveiks_geo = data.frame(c(&quot;41R10&quot;, &quot;21R38&quot;, &quot;9R40&quot;, &quot;17P5&quot;, &quot;SortdalEbbe1&quot;, &quot;3R11&quot;, &quot;21P1&quot;, &quot;41R15&quot;, &quot;Hornindal1&quot;, &quot;Hornindal2&quot;, &quot;1R16&quot;, &quot;2R23&quot;, &quot;8R19&quot;, &quot;Muri&quot;, &quot;k7R25&quot;, &quot;38R16&quot;, &quot;44R32&quot;, &quot;19R18&quot;, &quot;44R7&quot;, &quot;6R15&quot;, &quot;Laerdal2&quot;, &quot;7R7&quot;, &quot;14R6&quot;, &quot;14R30&quot;, &quot;27R17&quot;, &quot;28P1&quot;, &quot;28P6&quot;, &quot;28R21&quot;, &quot;28R33&quot;, &quot;28R8&quot;, &quot;42R20&quot;, &quot;42R31&quot;, &quot;45P5&quot;, &quot;45R11&quot;, &quot;46R12&quot;, &quot;46R37&quot;, &quot;16R23&quot;, &quot;16R37&quot;, &quot;39R20&quot;, &quot;40R14&quot;, &quot;40R1&quot;, &quot;40R20&quot;, &quot;Granvin1&quot;, &quot;Voss1&quot;), c(&quot;North-West Norway&quot;, &quot;North-West Norway&quot;, &quot;North-West Norway&quot;, &quot;North-West Norway&quot;, &quot;North-West Norway&quot;, &quot;North-West Norway&quot;, &quot;North-West Norway&quot;, &quot;North-West Norway&quot;, &quot;North-West Norway&quot;, &quot;North-West Norway&quot;, &quot;North-West Norway&quot;, &quot;North-West Norway&quot;, &quot;North-West Norway&quot;, &quot;North-West Norway&quot;, &quot;South-West Norway&quot;, &quot;South-West Norway&quot;, &quot;South-West Norway&quot;, &quot;South-West Norway&quot;, &quot;South-West Norway&quot;, &quot;South-West Norway&quot;, &quot;South-West Norway&quot;, &quot;South-West Norway&quot;, &quot;South-West Norway&quot;, &quot;South-West Norway&quot;, &quot;Central-Eastern Norway&quot;, &quot;Central-Eastern Norway&quot;, &quot;Central-Eastern Norway&quot;, &quot;Central-Eastern Norway&quot;, &quot;Central-Eastern Norway&quot;, &quot;Central-Eastern Norway&quot;, &quot;Latvia&quot;, &quot;Latvia&quot;, &quot;Latvia&quot;, &quot;Latvia&quot;, &quot;Lithuania&quot;, &quot;Lithuania&quot;, &quot;Lithuania&quot;, &quot;Lithuania&quot;, &quot;Russia&quot;, &quot;Russia&quot;, &quot;Russia&quot;, &quot;Russia&quot;, &quot;Other&quot;, &quot;Other&quot;)) colnames(kveiks_geo) = c(&quot;kveik&quot;, &quot;geo&quot;) rownames(kveiks_geo) = kveiks_geo$kveik ComplexHeatmap::Heatmap(matrix_heat, cluster_rows = FALSE, column_dend_reorder = TRUE, col = colorRamp2(c(-1, 0, 1), rev(brewer.pal(n = 3, name = &quot;RdBu&quot;))), na_col = &quot;grey75&quot;, top_annotation = HeatmapAnnotation(Geographic_origin = as.matrix(kveiks_geo$geo), col = list(Geographic_origin = c(&quot;North-West Norway&quot; = &quot;#0571B0&quot;, &quot;South-West Norway&quot; = &quot;#92C5DE&quot;, &quot;Central-Eastern Norway&quot; = &quot;#008470&quot;, &quot;Latvia&quot; = &quot;#FFDA00&quot;, &quot;Lithuania&quot; = &quot;#FBA01D&quot;, &quot;Russia&quot; = &quot;#A6611A&quot;, &quot;Other&quot; = &quot;grey50&quot;))), show_row_names = TRUE, show_column_names = TRUE, show_row_dend = FALSE, show_heatmap_legend = FALSE, row_title = &quot;CNVs&quot;, column_title_side = &quot;bottom&quot;) Figure 2.3: CNVs There are 69 high confidence CNVs, of which 5 (4 deletions and 1 duplication) of them are shared among all Kveiks. Interestingly, the two deletions in chromosome I and the one in chromosome XV are duplications in the lineage Granvin1, Hornindal1, Hornindal2, Voss1. Granvin1, Hornindal1, Hornindal2, Voss1 shares a unique fingerprint of 39 conserved CNVs scattered across 15 chromosomes. 2.3 CNV Functional Enrichment Lets see which genes (and corresponding functions) are interested by the CNVs that we identify in the farmhouse yeasts. We will run the following functional analyses: over-represented GO terms; enriched GO terms; over-represented KEGG pathways; enriched KEGG pathways; over-represented Reactome pathways; enriched Reactome pathwyas. # retrieve S. cerevisiae genome annotation Scere_DB = biomaRt::useMart(biomart = &quot;ENSEMBL_MART_ENSEMBL&quot;, dataset=&quot;scerevisiae_gene_ensembl&quot;) Scere_DB_table = biomaRt::getBM(attributes = c(&quot;ensembl_gene_id&quot;, &quot;ensembl_peptide_id&quot;, &quot;external_gene_name&quot;, &quot;entrezgene_id&quot;, &quot;description&quot;, &quot;chromosome_name&quot;, &quot;start_position&quot;, &quot;end_position&quot;), mart = Scere_DB) # build list of reference databases used for annotation steps ref_DB_list = c(&quot;org.Sc.sgd.db&quot;, &quot;yeast&quot;, &quot;scerevisiae&quot;) # create yeasts GO terms universe GO_universe = data.frame(matrix(nrow = nrow(Scere_DB_table), ncol = 2)) names(GO_universe) = c(&quot;ENSEMBL&quot;, &quot;EntrezID&quot;) GO_universe$ENSEMBL = Scere_DB_table$ensembl_gene_id # populate GO universe for(k in 1:nrow(GO_universe)){ # force to get only the first term if multiple are retrieved (sic!) ENSEMBL = GO_universe[k, 1] GO_universe[k, 2] = tryCatch( Scere_DB_table[which(Scere_DB_table[, 1] == ENSEMBL), c(4)][[1]], error = function(e) { NA } ) } GO_universe = as.character(c(GO_universe[!is.na(GO_universe$EntrezID), ]$EntrezID)) # drop mitochondria matrix_heat = matrix_heat[-which(rownames(matrix_heat) == &quot;Mito-1-86000&quot;), ] # retrieve genes by CNV CNV_genes_DB = list() for(i in 1:nrow(matrix_heat)){ # get CNVs cohordinates chromosome = stringr::str_split(rownames(matrix_heat)[i], &quot;:&quot;)[[1]][1] positions = stringr::str_split(rownames(matrix_heat)[i], &quot;:&quot;)[[1]][2] start_position = stringr::str_split(positions, &quot;-&quot;)[[1]][1] end_position = stringr::str_split(positions, &quot;-&quot;)[[1]][2] # get genes in CNV CNV_genes_DB[[rownames(matrix_heat)[i]]] = biomaRt::getBM(attributes = c(&quot;ensembl_gene_id&quot;, &quot;ensembl_peptide_id&quot;, &quot;external_gene_name&quot;, &quot;entrezgene_id&quot;, &quot;description&quot;, &quot;chromosome_name&quot;, &quot;start_position&quot;, &quot;end_position&quot;), filters = c(&quot;chromosome_name&quot;, &quot;start&quot;, &quot;end&quot;), values = list(chromosome = chromosome, start = start_position, end = end_position), mart = Scere_DB) } 2.3.1 CNV - I:1-160,000 Below are the genes interested by the CNV in chromosome I between positions 1 and 160,000. 2.3.1.1 Over-represented / Enriched GO - BP terms No significantly over-represented GO Biological Process terms. No significantly enriched GO Biological Process terms. my_genes = CNV_genes_DB[[&quot;I:1-160000&quot;]]$entrezgene_id[!is.na(CNV_genes_DB[[&quot;I:1-160000&quot;]]$entrezgene_id)] ### run over-represented analysis enriched_GOs = enrichGO(gene = my_genes, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;BP&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) 2.3.1.2 Over-represented / Enriched GO - CC terms No significantly over-represented GO Cellular Compartment terms. No significantly enriched GO Cellular Compartment terms. ### run over-represented analysis enriched_GOs = enrichGO(gene = my_genes, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;CC&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) 2.3.1.3 Over-represented / Enriched GO - MF terms No significantly over-represented GO Molecular Function terms. No significantly enriched GO Molecular Function terms. ### run over-represented analysis enriched_GOs = enrichGO(gene = my_genes, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;MF&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) 2.3.1.4 Over-represented / Enriched Reactome Pathways No significantly over-represented Reactome pathways. No significantly enriched Reactome pathways. # over-represented PA enrichedPA = ReactomePA::enrichPathway(gene = my_genes, pvalueCutoff = 0.05, organism = ref_DB_list[[2]]) 2.3.2 CNV - I:160,501-230,500 Below are the genes interested by the CNV in I:160501-230500. Lets run a set of over-represented and enrichment analyses. 2.3.2.1 Over-represented / Enriched GO - BP terms No significantly over-represented GO Biological Process terms. No significantly enriched GO Biological Process terms. my_genes1 = CNV_genes_DB[[&quot;I:160501-230500&quot;]]$entrezgene_id[!is.na(CNV_genes_DB[[&quot;I:160501-230500&quot;]]$entrezgene_id)] ### run over-represented analysis enriched_GOs = enrichGO(gene = my_genes1, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;BP&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) 2.3.2.2 Over-represented / Enriched GO - CC terms No significantly over-represented GO Cellular Compartment terms. No significantly enriched GO Cellular Compartment terms. ### run over-represented analysis enriched_GOs = enrichGO(gene = my_genes1, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;CC&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) 2.3.2.3 Over-represented / Enriched GO - MF terms No significantly over-represented GO Molecular Function terms. No significantly enriched GO Molecular Function terms. ### run over-represented analysis enriched_GOs = enrichGO(gene = my_genes1, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;MF&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) 2.3.2.4 Over-represented / Enriched Reactome Pathways No significantly over-represented Reactome pathways. No significantly enriched Reactome pathways. # over-represented PA enrichedPA = ReactomePA::enrichPathway(gene = my_genes1, pvalueCutoff = 0.05, organism = ref_DB_list[[2]]) 2.3.3 CNV - III:1,001-317,000 Below are the genes interested by the CNV in III:1001-317000. 2.3.3.1 Over-represented / Enriched GO - BP terms No significantly over-represented GO Biological Process terms. No significantly enriched GO Biological Process terms. my_genes2 = CNV_genes_DB[[&quot;III:1001-317000&quot;]]$entrezgene_id[!is.na(CNV_genes_DB[[&quot;III:1001-317000&quot;]]$entrezgene_id)] ### run over-represented analysis enriched_GOs = enrichGO(gene = my_genes2, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;BP&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) 2.3.3.2 Over-represented / Enriched GO - CC terms No significantly over-represented GO Cellular Compartment terms. No significantly enriched GO Cellular Compartment terms. ### run over-represented analysis enriched_GOs = enrichGO(gene = my_genes2, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;CC&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) 2.3.3.3 Over-represented / Enriched GO - MF terms No significantly over-represented GO Molecular Function terms. No significantly enriched GO Molecular Function terms. ### run over-represented analysis enriched_GOs = enrichGO(gene = my_genes2, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;MF&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) 2.3.3.4 Over-represented / Enriched Reactome Pathways No significantly over-represented Reactome pathways. No significantly enriched Reactome pathways. # over-represented PA enrichedPA = ReactomePA::enrichPathway(gene = my_genes2, pvalueCutoff = 0.05, organism = ref_DB_list[[2]]) 2.3.4 CNV - IV:1-18,500 Below are the genes interested by the CNV in IV:1-18500. 2.3.4.1 Over-represented / Enriched GO - BP terms No significantly enriched GO Biological Process terms. my_genes3 = CNV_genes_DB[[&quot;IV:1-18500&quot;]]$entrezgene_id[!is.na(CNV_genes_DB[[&quot;IV:1-18500&quot;]]$entrezgene_id)] ### run over-represented analysis enriched_GOs = enrichGO(gene = my_genes3, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;BP&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) # print table DT::datatable(enriched_GOs@result[which(enriched_GOs@result$p.adjust &lt;= 0.05), ], extensions = c(&quot;FixedColumns&quot;, &quot;FixedHeader&quot;), caption = &quot;Overrepresented BP terms in CNV IV:1-18500&quot;, options = list(scrollX = TRUE, paging = TRUE, fixedHeader = FALSE)) # plot GO dotplot p0 = enrichplot::dotplot(enriched_GOs, showCategory = nrow(enriched_GOs@result)) + ggtitle(&quot;CNV IV:1-18500 over-represented GO BP terms sets&quot;) + scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, &quot;Reds&quot;))(37))) + guides(colour = guide_colorbar(reverse = TRUE)) + theme(plot.title = element_text(size = 22, hjust = 0.5), legend.position = &quot;bottom&quot;, strip.background = element_rect(fill = &quot;grey85&quot;, colour = &quot;black&quot;), strip.text = element_text(size = 12)) print(p0) Figure 2.4: Dotplot of overrepresented BP terms in CNV IV:1-18500 # plot GO network p1 = goplot(enriched_GOs) + scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, &quot;Reds&quot;))(37))) + labs(title = &quot;CNV IV:1-18500 over-represented GO BP terms sets&quot;) + theme(plot.title = element_text(size = 20, hjust = 0.5)) print(p1) Figure 2.5: Network of overrepresented BP terms in CNV IV:1-18500 2.3.4.2 Over-represented / Enriched GO - CC terms No significantly over-represented GO Cellular Compartment terms. No significantly enriched GO Cellular Compartment terms. ### run over-represented analysis enriched_GOs = enrichGO(gene = my_genes3, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;CC&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) 2.3.4.3 Over-represented / Enriched GO - MF terms No significantly enriched GO Molecular Function terms. ### run over-represented analysis enriched_GOs = enrichGO(gene = my_genes3, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;MF&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) # print table DT::datatable(enriched_GOs@result[which(enriched_GOs@result$p.adjust &lt;= 0.05), ], extensions = c(&quot;FixedColumns&quot;, &quot;FixedHeader&quot;), caption = &quot;Overrepresented MF terms in CNV IV:1-18500&quot;, options = list(scrollX = TRUE, paging = TRUE, fixedHeader = FALSE)) # plot GO dotplot p0 = enrichplot::dotplot(enriched_GOs, showCategory = nrow(enriched_GOs@result)) + ggtitle(&quot;CNV IV:1-18500 over-represented GO MF terms sets&quot;) + scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, &quot;Reds&quot;))(37))) + guides(colour = guide_colorbar(reverse = TRUE)) + theme(plot.title = element_text(size = 22, hjust = 0.5), legend.position = &quot;bottom&quot;, strip.background = element_rect(fill = &quot;grey85&quot;, colour = &quot;black&quot;), strip.text = element_text(size = 12)) print(p0) Figure 2.6: Dotplot of overrepresented BP terms in CNV IV:1-18500 # plot GO network p1 = goplot(enriched_GOs) + scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, &quot;Reds&quot;))(37))) + labs(title = &quot;CNV IV:1-18500 over-represented GO MF terms sets&quot;) + theme(plot.title = element_text(size = 20, hjust = 0.5)) print(p1) Figure 2.7: Network of overrepresented BP terms in CNV IV:1-18500 2.3.4.4 Over-represented / Enriched Reactome Pathways No significantly enriched Reactome pathways. # over-represented PA enrichedPA = ReactomePA::enrichPathway(gene = my_genes3, pvalueCutoff = 0.05, organism = ref_DB_list[[2]]) # print table DT::datatable(enrichedPA@result[which(enrichedPA@result$p.adjust &lt;= 0.05), ], extensions = c(&quot;FixedColumns&quot;, &quot;FixedHeader&quot;), caption = &quot;Overrepresented Reactome pathways IV:1-18500&quot;, options = list(scrollX = TRUE, paging = TRUE, fixedHeader = FALSE)) 2.3.5 CNV - IV:527,001-540,000 Below are the genes interested by the CNV in IV:527001-540000. 2.3.5.1 Over-represented / Enriched GO - BP terms No significantly enriched GO Biological Process terms. my_genes4 = CNV_genes_DB[[&quot;IV:527001-540000&quot;]]$entrezgene_id[!is.na(CNV_genes_DB[[&quot;IV:527001-540000&quot;]]$entrezgene_id)] ### run over-represented analysis enriched_GOs = enrichGO(gene = my_genes4, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;BP&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) # print table DT::datatable(enriched_GOs@result[which(enriched_GOs@result$p.adjust &lt;= 0.05), ], extensions = c(&quot;FixedColumns&quot;, &quot;FixedHeader&quot;), caption = &quot;Overrepresented BP terms in CNV IV:527001-540000&quot;, options = list(scrollX = TRUE, paging = TRUE, fixedHeader = FALSE)) # plot GO dotplot p0 = enrichplot::dotplot(enriched_GOs, showCategory = nrow(enriched_GOs@result)) + ggtitle(&quot;CNV IV:527001-540000 over-represented GO MF terms sets&quot;) + scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, &quot;Reds&quot;))(37))) + guides(colour = guide_colorbar(reverse = TRUE)) + theme(plot.title = element_text(size = 22, hjust = 0.5), legend.position = &quot;bottom&quot;, strip.background = element_rect(fill = &quot;grey85&quot;, colour = &quot;black&quot;), strip.text = element_text(size = 12)) print(p0) Figure 2.8: Dotplot of overrepresented BP terms in CNV IV:527001-540000 # plot GO network p1 = goplot(enriched_GOs) + scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, &quot;Reds&quot;))(37))) + labs(title = &quot;CNV IV:527001-540000 over-represented GO MF terms sets&quot;) + theme(plot.title = element_text(size = 20, hjust = 0.5)) print(p1) Figure 2.9: Network of overrepresented BP terms in CNV IV:527001-540000 2.3.5.2 Over-represented / Enriched GO - CC terms No significantly over-represented GO Cellular Compartment terms. No significantly enriched GO Cellular Compartment terms. ### run over-represented analysis enriched_GOs = enrichGO(gene = my_genes4, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;CC&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) 2.3.5.3 Over-represented / Enriched GO - MF terms No significantly over-represented GO Molecular Function terms. No significantly enriched GO Molecular Function terms. ### run over-represented analysis enriched_GOs = enrichGO(gene = my_genes4, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;MF&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) # print table DT::datatable(enriched_GOs@result[which(enriched_GOs@result$p.adjust &lt;= 0.05), ], extensions = c(&quot;FixedColumns&quot;, &quot;FixedHeader&quot;), caption = &quot;Overrepresented MF terms in CNV IV:527001-540000&quot;, options = list(scrollX = TRUE, paging = TRUE, fixedHeader = FALSE)) # plot GO dotplot p0 = enrichplot::dotplot(enriched_GOs, showCategory = nrow(enriched_GOs@result)) + ggtitle(&quot;CNV CNV IV:527001-540000 over-represented GO MF terms sets&quot;) + scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, &quot;Reds&quot;))(37))) + guides(colour = guide_colorbar(reverse = TRUE)) + theme(plot.title = element_text(size = 22, hjust = 0.5), legend.position = &quot;bottom&quot;, strip.background = element_rect(fill = &quot;grey85&quot;, colour = &quot;black&quot;), strip.text = element_text(size = 12)) print(p0) Figure 2.10: Dotplot of overrepresented BP terms in CNV CNV IV:527001-540000 # plot GO network p1 = goplot(enriched_GOs) + scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, &quot;Reds&quot;))(37))) + labs(title = &quot;CNV CNV IV:527001-540000 over-represented GO MF terms sets&quot;) + theme(plot.title = element_text(size = 20, hjust = 0.5)) print(p1) Figure 2.11: Network of overrepresented BP terms in CNV CNV IV:527001-540000 2.3.5.4 Over-represented / Enriched Reactome Pathways No significantly over-represented Reactome pathways. No significantly enriched Reactome pathways. # over-represented PA enrichedPA = ReactomePA::enrichPathway(gene = my_genes4, pvalueCutoff = 0.05, organism = ref_DB_list[[2]]) 2.3.6 CNV - VI:4,001-270,500 Below are the genes interested by the CNV in VI:4001-270500. 2.3.6.1 Over-represented / Enriched GO - BP terms No significantly over-represented GO Biological Process terms. No significantly enriched GO Biological Process terms. my_genes5 = CNV_genes_DB[[&quot;VI:4001-270500&quot;]]$entrezgene_id[!is.na(CNV_genes_DB[[&quot;VI:4001-270500&quot;]]$entrezgene_id)] ### run over-represented analysis enriched_GOs = enrichGO(gene = my_genes5, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;BP&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) 2.3.6.2 Over-represented / Enriched GO - CC terms No significantly over-represented GO Cellular Compartment terms. No significantly enriched GO Cellular Compartment terms. ### run over-represented analysis enriched_GOs = enrichGO(gene = my_genes5, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;CC&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) 2.3.6.3 Over-represented / Enriched GO - MF terms No significantly over-represented GO Molecular Function terms. No significantly enriched GO Molecular Function terms. ### run over-represented analysis enriched_GOs = enrichGO(gene = my_genes5, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;MF&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) 2.3.6.4 Over-represented / Enriched Reactome Pathways No significantly over-represented Reactome pathways. No significantly enriched Reactome pathways. # over-represented PA enrichedPA = ReactomePA::enrichPathway(gene = my_genes5, pvalueCutoff = 0.05, organism = ref_DB_list[[2]]) # print table DT::datatable(enrichedPA@result[which(enrichedPA@result$p.adjust &lt;= 0.05), ], extensions = c(&quot;FixedColumns&quot;, &quot;FixedHeader&quot;), caption = &quot;Overrepresented Reactome pathways VI:4001-270500&quot;, options = list(scrollX = TRUE, paging = TRUE, fixedHeader = FALSE)) # plot reactomePA dotplots p0 = enrichplot::dotplot(enrichedPA, showCategory = nrow(enrichedPA@result)) + ggtitle(&quot;Overrepresented Reactome pathways in CNV VI:4001-270500&quot;) + scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, &quot;Reds&quot;))(37))) + guides(colour = guide_colorbar(reverse = TRUE)) + theme(plot.title = element_text(size = 22, hjust = 0.5), legend.position = &quot;bottom&quot;, strip.background = element_rect(fill = &quot;grey85&quot;, colour = &quot;black&quot;), strip.text = element_text(size = 12)) print(p0) Figure 2.12: Dotplot of overrepresented Reactome pathways in CNV VI:4001-270500 enrichedPA_tmp = enrichedPA enrichedPA_tmp@keytype = &quot;SYMBOL&quot; my_symbols = c() for(k in 1:length(enrichedPA_tmp@gene)){ ENTREZ = enrichedPA_tmp@gene[k] SYMBOL = Scere_DB_table[which(Scere_DB_table$entrezgene_id == ENTREZ), ]$external_gene_name my_symbols[k] = SYMBOL } enrichedPA_tmp@gene = my_symbols for(k in 1:nrow(enrichedPA_tmp@result)){ my_vec = enrichedPA_tmp@result[k, &quot;geneID&quot;] my_vec = stringr::str_split(my_vec, &quot;/&quot;)[[1]] for(i in 1:length(my_vec)){ ENTREZ = my_vec[[i]] SYMBOL = Scere_DB_table[which(Scere_DB_table$entrezgene_id == ENTREZ), ]$external_gene_name my_vec[[i]] = SYMBOL[[1]] } my_vec = paste(my_vec, collapse = &quot;/&quot;) enrichedPA_tmp@result[k, &quot;geneID&quot;] = my_vec } # plot heatmap p2 = heatplot(enrichedPA_tmp, showCategory = nrow(enrichedPA_tmp@result)) + ggtitle(&quot;Overrepresented Reactome pathways in CNV VI:4001-270500&quot;) + #scale_fill_gradient2(name = &quot;&quot;, low = &quot;darkblue&quot;, high = &quot;darkblue&quot;)+ theme(plot.title = element_text(size = 16, hjust = 0.5), legend.position = c(100,100)) print(p2) Figure 2.13: Genes associated with overrepresented Reactome pathways in CNV VI:4001-270500 2.3.7 CNV - VIII:85,501-556,000 Below are the genes interested by the CNV in VIII:85501-556000. 2.3.7.1 Over-represented / Enriched GO - BP terms No significantly over-represented GO Biological Process terms. No significantly enriched GO Biological Process terms. my_genes6 = CNV_genes_DB[[&quot;VIII:85501-556000&quot;]]$entrezgene_id[!is.na(CNV_genes_DB[[&quot;VIII:85501-556000&quot;]]$entrezgene_id)] ### run over-represented analysis enriched_GOs = enrichGO(gene = my_genes6, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;BP&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) 2.3.7.2 Over-represented / Enriched GO - CC terms No significantly over-represented GO Cellular Compartment terms. No significantly enriched GO Cellular Compartment terms. ### run over-represented analysis enriched_GOs = enrichGO(gene = my_genes6, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;CC&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) 2.3.7.3 Over-represented / Enriched GO - MF terms No significantly over-represented GO Molecular Function terms. No significantly enriched GO Molecular Function terms. ### run over-represented analysis enriched_GOs = enrichGO(gene = my_genes6, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;MF&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) 2.3.7.4 Over-represented / Enriched Reactome Pathways No significantly over-represented Reactome pathways. No significantly enriched Reactome pathways. # over-represented PA enrichedPA = ReactomePA::enrichPathway(gene = my_genes6, pvalueCutoff = 0.05, organism = ref_DB_list[[2]]) 2.3.8 CNV - XI:645,001-667,000 Below are the genes interested by the CNV in XI:645001-667000. 2.3.8.1 Over-represented / Enriched GO - BP terms No significantly enriched GO Biological Process terms. my_genes7 = CNV_genes_DB[[&quot;XI:645001-667000&quot;]]$entrezgene_id[!is.na(CNV_genes_DB[[&quot;XI:645001-667000&quot;]]$entrezgene_id)] ### run over-represented analysis enriched_GOs = enrichGO(gene = my_genes7, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;BP&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) # print table DT::datatable(enriched_GOs@result[which(enriched_GOs@result$p.adjust &lt;= 0.05), ], extensions = c(&quot;FixedColumns&quot;, &quot;FixedHeader&quot;), caption = &quot;Overrepresented BP terms in CNV XI:645001-667000&quot;, options = list(scrollX = TRUE, paging = TRUE, fixedHeader = FALSE)) # plot GO dotplot p0 = enrichplot::dotplot(enriched_GOs, showCategory = nrow(enriched_GOs@result)) + ggtitle(&quot;CNV XI:645001-667000 over-represented GO MF terms sets&quot;) + scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, &quot;Reds&quot;))(37))) + guides(colour = guide_colorbar(reverse = TRUE)) + theme(plot.title = element_text(size = 22, hjust = 0.5), legend.position = &quot;bottom&quot;, strip.background = element_rect(fill = &quot;grey85&quot;, colour = &quot;black&quot;), strip.text = element_text(size = 12)) print(p0) Figure 2.14: Dotplot of overrepresented BP terms in CNV XI:645001-667000 # plot GO network p1 = goplot(enriched_GOs) + scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, &quot;Reds&quot;))(37))) + labs(title = &quot;CNV XI:645001-667000 over-represented GO BP terms sets&quot;) + theme(plot.title = element_text(size = 20, hjust = 0.5)) print(p1) Figure 2.15: Network of overrepresented BP terms in CNV XI:645001-667000 2.3.8.2 Over-represented / Enriched GO - CC terms No significantly over-represented GO Cellular Compartment terms. No significantly enriched GO Cellular Compartment terms. ### run over-represented analysis enriched_GOs = enrichGO(gene = my_genes7, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;CC&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) # print table DT::datatable(enriched_GOs@result[which(enriched_GOs@result$p.adjust &lt;= 0.05), ], extensions = c(&quot;FixedColumns&quot;, &quot;FixedHeader&quot;), caption = &quot;Overrepresented CC terms in CNV XI:645001-667000&quot;, options = list(scrollX = TRUE, paging = TRUE, fixedHeader = FALSE)) # plot GO dotplot p0 = enrichplot::dotplot(enriched_GOs, showCategory = nrow(enriched_GOs@result)) + ggtitle(&quot;CNV XI:645001-667000 over-represented GO CC terms sets&quot;) + scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, &quot;Reds&quot;))(37))) + guides(colour = guide_colorbar(reverse = TRUE)) + theme(plot.title = element_text(size = 22, hjust = 0.5), legend.position = &quot;bottom&quot;, strip.background = element_rect(fill = &quot;grey85&quot;, colour = &quot;black&quot;), strip.text = element_text(size = 12)) print(p0) Figure 2.16: Dotplot of overrepresented CC terms in CNV XI:645001-667000 # plot GO network p1 = goplot(enriched_GOs) + scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, &quot;Reds&quot;))(37))) + labs(title = &quot;CNV XI:645001-667000 over-represented GO CC terms sets&quot;) + theme(plot.title = element_text(size = 20, hjust = 0.5)) print(p1) Figure 2.17: Network of overrepresented CC terms in CNV XI:645001-667000 2.3.8.3 Over-represented / Enriched GO - MF terms No significantly over-represented GO Molecular Function terms. No significantly enriched GO Molecular Function terms. ### run over-represented analysis enriched_GOs = enrichGO(gene = my_genes7, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;MF&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) # print table DT::datatable(enriched_GOs@result[which(enriched_GOs@result$p.adjust &lt;= 0.05), ], extensions = c(&quot;FixedColumns&quot;, &quot;FixedHeader&quot;), caption = &quot;Overrepresented MF terms in CNV XI:645001-667000&quot;, options = list(scrollX = TRUE, paging = TRUE, fixedHeader = FALSE)) # plot GO dotplot p0 = enrichplot::dotplot(enriched_GOs, showCategory = nrow(enriched_GOs@result)) + ggtitle(&quot;CNV XI:645001-667000 over-represented GO MF terms sets&quot;) + scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, &quot;Reds&quot;))(37))) + guides(colour = guide_colorbar(reverse = TRUE)) + theme(plot.title = element_text(size = 22, hjust = 0.5), legend.position = &quot;bottom&quot;, strip.background = element_rect(fill = &quot;grey85&quot;, colour = &quot;black&quot;), strip.text = element_text(size = 12)) print(p0) Figure 2.18: Dotplot of overrepresented MF terms in CNV XI:645001-667000 # plot GO network p1 = goplot(enriched_GOs) + scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, &quot;Reds&quot;))(37))) + labs(title = &quot;CNV XI:645001-667000 over-represented GO MF terms sets&quot;) + theme(plot.title = element_text(size = 20, hjust = 0.5)) print(p1) Figure 2.19: Network of overrepresented MF terms in CNV XI:645001-667000 2.3.8.4 Over-represented / Enriched Reactome Pathways No significantly over-represented Reactome pathways. No significantly enriched Reactome pathways. # over-represented PA enrichedPA = ReactomePA::enrichPathway(gene = my_genes7, pvalueCutoff = 0.05, organism = ref_DB_list[[2]]) # print table DT::datatable(enrichedPA@result[which(enrichedPA@result$p.adjust &lt;= 0.05), ], extensions = c(&quot;FixedColumns&quot;, &quot;FixedHeader&quot;), caption = &quot;Overrepresented Reactome pathways XI:645001-667000&quot;, options = list(scrollX = TRUE, paging = TRUE, fixedHeader = FALSE)) # plot reactomePA dotplots p0 = enrichplot::dotplot(enrichedPA, showCategory = nrow(enrichedPA@result)) + ggtitle(&quot;Overrepresented Reactome pathways in CNV XI:645001-667000&quot;) + scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, &quot;Reds&quot;))(37))) + guides(colour = guide_colorbar(reverse = TRUE)) + theme(plot.title = element_text(size = 22, hjust = 0.5), legend.position = &quot;bottom&quot;, strip.background = element_rect(fill = &quot;grey85&quot;, colour = &quot;black&quot;), strip.text = element_text(size = 12)) print(p0) Figure 2.20: Dotplot of overrepresented Reactome pathways in CNV XI:645001-667000 enrichedPA_tmp = enrichedPA enrichedPA_tmp@keytype = &quot;SYMBOL&quot; my_symbols = c() for(k in 1:length(enrichedPA_tmp@gene)){ ENTREZ = enrichedPA_tmp@gene[k] SYMBOL = Scere_DB_table[which(Scere_DB_table$entrezgene_id == ENTREZ), ]$external_gene_name my_symbols[k] = SYMBOL } enrichedPA_tmp@gene = my_symbols for(k in 1:nrow(enrichedPA_tmp@result)){ my_vec = enrichedPA_tmp@result[k, &quot;geneID&quot;] my_vec = stringr::str_split(my_vec, &quot;/&quot;)[[1]] for(i in 1:length(my_vec)){ ENTREZ = my_vec[[i]] SYMBOL = Scere_DB_table[which(Scere_DB_table$entrezgene_id == ENTREZ), ]$external_gene_name my_vec[[i]] = SYMBOL[[1]] } my_vec = paste(my_vec, collapse = &quot;/&quot;) enrichedPA_tmp@result[k, &quot;geneID&quot;] = my_vec } # plot heatmap p2 = heatplot(enrichedPA_tmp, showCategory = nrow(enrichedPA_tmp@result)) + ggtitle(&quot;Overrepresented Reactome pathways in CNV XI:645001-667000&quot;) + #scale_fill_gradient2(name = &quot;&quot;, low = &quot;darkblue&quot;, high = &quot;darkblue&quot;)+ theme(plot.title = element_text(size = 16, hjust = 0.5), legend.position = c(100,100)) print(p2) Figure 2.21: Genes associated with overrepresented Reactome pathways in CNV XI:645001-667000 2.3.9 CNV - XII:451,001-490,000 Below are the genes interested by the CNV in XII:451001-490000. 2.3.9.1 Over-represented / Enriched GO - BP terms No significantly enriched GO Biological Process terms. my_genes8 = CNV_genes_DB[[&quot;XII:451001-490000&quot;]]$entrezgene_id[!is.na(CNV_genes_DB[[&quot;XII:451001-490000&quot;]]$entrezgene_id)] ### run over-represented analysis enriched_GOs = enrichGO(gene = my_genes8, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;BP&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) # print table DT::datatable(enriched_GOs@result[which(enriched_GOs@result$p.adjust &lt;= 0.05), ], extensions = c(&quot;FixedColumns&quot;, &quot;FixedHeader&quot;), caption = &quot;Overrepresented BP terms in CNV XII:451001-490000&quot;, options = list(scrollX = TRUE, paging = TRUE, fixedHeader = FALSE)) # plot GO dotplot p0 = enrichplot::dotplot(enriched_GOs, showCategory = nrow(enriched_GOs@result)) + ggtitle(&quot;CNV XII:451001-490000 over-represented GO BP terms sets&quot;) + scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, &quot;Reds&quot;))(37))) + guides(colour = guide_colorbar(reverse = TRUE)) + theme(plot.title = element_text(size = 22, hjust = 0.5), legend.position = &quot;bottom&quot;, strip.background = element_rect(fill = &quot;grey85&quot;, colour = &quot;black&quot;), strip.text = element_text(size = 12)) print(p0) Figure 2.22: Dotplot of overrepresented BP terms in CNV XII:451001-490000 # plot GO network p1 = goplot(enriched_GOs) + scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, &quot;Reds&quot;))(37))) + labs(title = &quot;CNV XII:451001-490000 over-represented GO BP terms sets&quot;) + theme(plot.title = element_text(size = 20, hjust = 0.5)) print(p1) Figure 2.23: Network of overrepresented BP terms in CNV XII:451001-490000 2.3.9.2 Over-represented / Enriched GO - CC terms No significantly over-represented GO Cellular Compartment terms. No significantly enriched GO Cellular Compartment terms. ### run over-represented analysis enriched_GOs = enrichGO(gene = my_genes8, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;CC&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) # print table DT::datatable(enriched_GOs@result[which(enriched_GOs@result$p.adjust &lt;= 0.05), ], extensions = c(&quot;FixedColumns&quot;, &quot;FixedHeader&quot;), caption = &quot;Overrepresented CC terms in XII:451001-490000&quot;, options = list(scrollX = TRUE, paging = TRUE, fixedHeader = FALSE)) 2.3.9.3 Over-represented / Enriched GO - MF terms No significantly over-represented GO Molecular Function terms. No significantly enriched GO Molecular Function terms. ### run over-represented analysis enriched_GOs = enrichGO(gene = my_genes8, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;MF&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) # print table DT::datatable(enriched_GOs@result[which(enriched_GOs@result$p.adjust &lt;= 0.05), ], extensions = c(&quot;FixedColumns&quot;, &quot;FixedHeader&quot;), caption = &quot;Overrepresented MF terms in CNV XII:451001-490000&quot;, options = list(scrollX = TRUE, paging = TRUE, fixedHeader = FALSE)) 2.3.9.4 Over-represented / Enriched Reactome Pathways No significantly over-represented Reactome pathways. No significantly enriched Reactome pathways. # over-represented PA enrichedPA = ReactomePA::enrichPathway(gene = my_genes8, pvalueCutoff = 0.05, organism = ref_DB_list[[2]]) 2.3.10 CNV - XV:1-38,000 Below are the genes interested by the CNV in XV:1-38000. 2.3.10.1 Over-represented / Enriched GO - BP terms No significantly over-represented GO Biological Process terms. No significantly enriched GO Biological Process terms. my_genes9 = CNV_genes_DB[[&quot;XV:1-38000&quot;]]$entrezgene_id[!is.na(CNV_genes_DB[[&quot;XV:1-38000&quot;]]$entrezgene_id)] ### run over-represented analysis enriched_GOs = enrichGO(gene = my_genes9, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;BP&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) 2.3.10.2 Over-represented / Enriched GO - CC terms No significantly over-represented GO Cellular Compartment terms. No significantly enriched GO Cellular Compartment terms. ### run over-represented analysis enriched_GOs = enrichGO(gene = my_genes9, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;CC&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) # print table DT::datatable(enriched_GOs@result[which(enriched_GOs@result$p.adjust &lt;= 0.05), ], extensions = c(&quot;FixedColumns&quot;, &quot;FixedHeader&quot;), caption = &quot;Overrepresented CC terms in CNV XV:1-38000&quot;, options = list(scrollX = TRUE, paging = TRUE, fixedHeader = FALSE)) # plot GO dotplot p0 = enrichplot::dotplot(enriched_GOs, showCategory = nrow(enriched_GOs@result)) + ggtitle(&quot;CNV XV:1-38000 over-represented GO CC terms sets&quot;) + scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, &quot;Reds&quot;))(37))) + guides(colour = guide_colorbar(reverse = TRUE)) + theme(plot.title = element_text(size = 22, hjust = 0.5), legend.position = &quot;bottom&quot;, strip.background = element_rect(fill = &quot;grey85&quot;, colour = &quot;black&quot;), strip.text = element_text(size = 12)) print(p0) Figure 2.24: Dotplot of overrepresented CC terms in CNV XV:1-38000 # plot GO network p1 = goplot(enriched_GOs) + scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, &quot;Reds&quot;))(37))) + labs(title = &quot;CNV XV:1-38000 over-represented GO CC terms sets&quot;) + theme(plot.title = element_text(size = 20, hjust = 0.5)) print(p1) Figure 2.25: Network of overrepresented CC terms in CNV XV:1-38000 2.3.10.3 Over-represented / Enriched GO - MF terms No significantly over-represented GO Molecular Function terms. No significantly enriched GO Molecular Function terms. ### run over-represented analysis enriched_GOs = enrichGO(gene = my_genes9, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;MF&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) 2.3.10.4 Over-represented / Enriched Reactome Pathways No significantly over-represented Reactome pathways. No significantly enriched Reactome pathways. # over-represented PA enrichedPA = ReactomePA::enrichPathway(gene = my_genes9, pvalueCutoff = 0.05, organism = ref_DB_list[[2]]) # print table DT::datatable(enrichedPA@result[which(enrichedPA@result$p.adjust &lt;= 0.05), ], extensions = c(&quot;FixedColumns&quot;, &quot;FixedHeader&quot;), caption = &quot;Overrepresented Reactome pathways XV:1-38000&quot;, options = list(scrollX = TRUE, paging = TRUE, fixedHeader = FALSE)) # plot reactomePA dotplots p0 = enrichplot::dotplot(enrichedPA, showCategory = nrow(enrichedPA@result)) + ggtitle(&quot;Overrepresented Reactome pathways in CNV XV:1-38000&quot;) + scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, &quot;Reds&quot;))(37))) + guides(colour = guide_colorbar(reverse = TRUE)) + theme(plot.title = element_text(size = 22, hjust = 0.5), legend.position = &quot;bottom&quot;, strip.background = element_rect(fill = &quot;grey85&quot;, colour = &quot;black&quot;), strip.text = element_text(size = 12)) print(p0) Figure 2.26: Dotplot of overrepresented Reactome pathways in CNV XV:1-38000 enrichedPA_tmp = enrichedPA enrichedPA_tmp@keytype = &quot;SYMBOL&quot; my_symbols = c() for(k in 1:length(enrichedPA_tmp@gene)){ ENTREZ = enrichedPA_tmp@gene[k] SYMBOL = Scere_DB_table[which(Scere_DB_table$entrezgene_id == ENTREZ), ]$external_gene_name my_symbols[k] = SYMBOL } enrichedPA_tmp@gene = my_symbols for(k in 1:nrow(enrichedPA_tmp@result)){ my_vec = enrichedPA_tmp@result[k, &quot;geneID&quot;] my_vec = stringr::str_split(my_vec, &quot;/&quot;)[[1]] for(i in 1:length(my_vec)){ ENTREZ = my_vec[[i]] SYMBOL = Scere_DB_table[which(Scere_DB_table$entrezgene_id == ENTREZ), ]$external_gene_name my_vec[[i]] = SYMBOL[[1]] } my_vec = paste(my_vec, collapse = &quot;/&quot;) enrichedPA_tmp@result[k, &quot;geneID&quot;] = my_vec } # plot heatmap p2 = heatplot(enrichedPA_tmp, showCategory = nrow(enrichedPA_tmp@result)) + ggtitle(&quot;Overrepresented Reactome pathways in CNV XV:1-38000&quot;) + #scale_fill_gradient2(name = &quot;&quot;, low = &quot;darkblue&quot;, high = &quot;darkblue&quot;)+ theme(plot.title = element_text(size = 16, hjust = 0.5), legend.position = c(100,100)) print(p2) Figure 2.27: Genes associated with overrepresented Reactome pathways in CNV XV:1-38000 2.3.11 Summary of enriched or depleted functions Lets compare all enrichment together 2.3.11.1 Enriched GO terms # retrieve genes gene_cluster = list() for(i in 1:length(CNV_genes_DB)){ gene_cluster[[names(CNV_genes_DB)[[i]]]] = as.character(CNV_genes_DB[[i]]$entrezgene_id[!is.na(CNV_genes_DB[[i]]$entrezgene_id)]) } BP = compareCluster(geneCluster = gene_cluster, fun = &quot;enrichGO&quot;, pvalueCutoff = 0.05, OrgDb = ref_DB_list[[1]], ont = &quot;BP&quot;) BP@keytype = &quot;SYMBOL&quot; my_symbols = c() for(k in 1:length(BP@geneClusters)){ for(i in 1:length(BP@geneClusters[[k]])){ ENTREZ = BP@geneClusters[[k]][[i]] SYMBOL = Scere_DB_table[which(Scere_DB_table$entrezgene_id == ENTREZ), ]$external_gene_name my_symbols[i] = SYMBOL } BP@geneClusters[[k]] = my_symbols } for(k in 1:length(BP@compareClusterResult$geneID)){ my_vec = BP@compareClusterResult$geneID[[k]] my_vec = stringr::str_split(my_vec, &quot;/&quot;)[[1]] for(i in 1:length(my_vec)){ ENTREZ = my_vec[[i]] SYMBOL = Scere_DB_table[which(Scere_DB_table$entrezgene_id == ENTREZ), ]$external_gene_name my_vec[[i]] = SYMBOL[[1]] } my_vec = paste(my_vec, collapse = &quot;/&quot;) BP@compareClusterResult$geneID[[k]] = my_vec } enrichplot::dotplot(BP, includeAll = TRUE) + ggtitle(&quot;enriched BP GO terms across CNVs&quot;) + scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, &quot;Reds&quot;))(37))) + guides(colour = guide_colorbar(reverse = TRUE)) + theme(plot.title = element_text(size = 22, hjust = 0.5)) + theme(axis.text.x=element_text(angle = 45, hjust = 1)) Figure 2.28: GO BP terms shared across CNVs cnetplot(BP) + ggtitle(&quot;enriched BP GO terms across CNVs&quot;) + scale_fill_manual(values = colorRampPalette(brewer.pal(10, &quot;Paired&quot;))(length(BP@geneClusters))) + theme(plot.title = element_text(size = 22, hjust = 0.5)) Figure 2.29: GO BP terms network shared across CNVs CC = compareCluster(geneCluster = gene_cluster, fun = &quot;enrichGO&quot;, pvalueCutoff = 0.05, OrgDb = ref_DB_list[[1]], ont = &quot;CC&quot;) CC@keytype = &quot;SYMBOL&quot; my_symbols = c() for(k in 1:length(CC@geneClusters)){ for(i in 1:length(CC@geneClusters[[k]])){ ENTREZ = CC@geneClusters[[k]][[i]] SYMBOL = Scere_DB_table[which(Scere_DB_table$entrezgene_id == ENTREZ), ]$external_gene_name my_symbols[i] = SYMBOL } CC@geneClusters[[k]] = my_symbols } for(k in 1:length(CC@compareClusterResult$geneID)){ my_vec = CC@compareClusterResult$geneID[[k]] my_vec = stringr::str_split(my_vec, &quot;/&quot;)[[1]] for(i in 1:length(my_vec)){ ENTREZ = my_vec[[i]] SYMBOL = Scere_DB_table[which(Scere_DB_table$entrezgene_id == ENTREZ), ]$external_gene_name my_vec[[i]] = SYMBOL[[1]] } my_vec = paste(my_vec, collapse = &quot;/&quot;) CC@compareClusterResult$geneID[[k]] = my_vec } enrichplot::dotplot(CC, includeAll = TRUE) + ggtitle(&quot;enriched CC GO terms across CNVs&quot;) + scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, &quot;Reds&quot;))(37))) + guides(colour = guide_colorbar(reverse = TRUE)) + theme(plot.title = element_text(size = 22, hjust = 0.5)) + theme(axis.text.x=element_text(angle = 45, hjust = 1)) Figure 2.30: GO CC terms shared across CNVs cnetplot(CC) + ggtitle(&quot;enriched CC GO terms across CNVs&quot;) + scale_fill_manual(values = colorRampPalette(brewer.pal(10, &quot;Paired&quot;))(length(BP@geneClusters))) + theme(plot.title = element_text(size = 22, hjust = 0.5)) Figure 2.31: GO CC terms network shared across CNVs MF = compareCluster(geneCluster = gene_cluster, fun = &quot;enrichGO&quot;, pvalueCutoff = 0.05, OrgDb = ref_DB_list[[1]], ont = &quot;MF&quot;) MF@keytype = &quot;SYMBOL&quot; my_symbols = c() for(k in 1:length(MF@geneClusters)){ for(i in 1:length(MF@geneClusters[[k]])){ ENTREZ = MF@geneClusters[[k]][[i]] SYMBOL = Scere_DB_table[which(Scere_DB_table$entrezgene_id == ENTREZ), ]$external_gene_name my_symbols[i] = SYMBOL } MF@geneClusters[[k]] = my_symbols } for(k in 1:length(MF@compareClusterResult$geneID)){ my_vec = MF@compareClusterResult$geneID[[k]] my_vec = stringr::str_split(my_vec, &quot;/&quot;)[[1]] for(i in 1:length(my_vec)){ ENTREZ = my_vec[[i]] SYMBOL = Scere_DB_table[which(Scere_DB_table$entrezgene_id == ENTREZ), ]$external_gene_name my_vec[[i]] = SYMBOL[[1]] } my_vec = paste(my_vec, collapse = &quot;/&quot;) MF@compareClusterResult$geneID[[k]] = my_vec } enrichplot::dotplot(MF, includeAll = TRUE) + ggtitle(&quot;enriched MF GO terms across CNVs&quot;) + scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, &quot;Reds&quot;))(37))) + guides(colour = guide_colorbar(reverse = TRUE)) + theme(plot.title = element_text(size = 22, hjust = 0.5)) + theme(axis.text.x=element_text(angle = 45, hjust = 1)) Figure 2.32: GO MF terms shared across CNVs cnetplot(MF) + ggtitle(&quot;enriched MF GO terms across CNVs&quot;) + scale_fill_manual(values = colorRampPalette(brewer.pal(10, &quot;Paired&quot;))(length(BP@geneClusters))) + theme(plot.title = element_text(size = 22, hjust = 0.5)) Figure 2.33: GO MF terms network shared across CNVs 2.3.11.2 Enriched KEGG pathways KEGG = compareCluster(geneCluster = gene_cluster, fun = &quot;enrichKEGG&quot;, pvalueCutoff = 0.05, organism = &quot;sce&quot;) 2.3.11.3 Enriched Reactome pathways PA = compareCluster(geneCluster = gene_cluster, fun = &quot;enrichPathway&quot;, pvalueCutoff = 0.05, organism = ref_DB_list[[2]]) PA@keytype = &quot;SYMBOL&quot; my_symbols = c() for(k in 1:length(PA@geneClusters)){ for(i in 1:length(PA@geneClusters[[k]])){ ENTREZ = PA@geneClusters[[k]][[i]] SYMBOL = Scere_DB_table[which(Scere_DB_table$entrezgene_id == ENTREZ), ]$external_gene_name my_symbols[i] = SYMBOL } PA@geneClusters[[k]] = my_symbols } for(k in 1:length(PA@compareClusterResult$geneID)){ my_vec = PA@compareClusterResult$geneID[[k]] my_vec = stringr::str_split(my_vec, &quot;/&quot;)[[1]] for(i in 1:length(my_vec)){ ENTREZ = my_vec[[i]] SYMBOL = Scere_DB_table[which(Scere_DB_table$entrezgene_id == ENTREZ), ]$external_gene_name my_vec[[i]] = SYMBOL[[1]] } my_vec = paste(my_vec, collapse = &quot;/&quot;) PA@compareClusterResult$geneID[[k]] = my_vec } enrichplot::dotplot(PA) + ggtitle(&quot;enriched reactomePA across CNVs&quot;) + scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, &quot;Reds&quot;))(37))) + guides(colour = guide_colorbar(reverse = TRUE)) + theme(plot.title = element_text(size = 22, hjust = 0.5)) + theme(axis.text.x=element_text(angle = 45, hjust = 1)) Figure 2.34: Reactome pathways shared across CNVs cnetplot(PA) + ggtitle(&quot;Reactome pathways across CNVs&quot;) + scale_fill_manual(values = colorRampPalette(brewer.pal(10, &quot;Paired&quot;))(length(BP@geneClusters))) + theme(plot.title = element_text(size = 22, hjust = 0.5)) Figure 2.35: Reactome pathways network shared across CNVs "],["genome-assembly-and-annotation.html", "Chapter 3 Genome Assembly and Annotation 3.1 Genome Assembly 3.2 Genome Annotation 3.3 Identification of Farmhouse-specific Gene Families", " Chapter 3 Genome Assembly and Annotation To determine the genes in Kveiks samples, we need to do a de novo assembly and then to run an ab initio prediction of genes (using Saccharomyes proteins and genes as guide). We will use SPAdes assembler, follower by Redundans pipeline to collapse redundant contigs. 3.1 Genome Assembly ## SPAdes assembly while read line ; do python ~/bin/SPAdes-3.13.0-Linux/bin/spades.py \\ -1 ../00_trim_reads/&quot;${line}&quot;.R1.tr.fq.gz \\ -2 ../00_trim_reads/&quot;${line}&quot;.R2.tr.fq.gz \\ -o &quot;${line}&quot;_SPAdes \\ --threads 72 \\ -k 21,29,39,59,79,99,119,127 done &lt; ../sample.lst ## redundans docker run -v /home/andrea/03_KVEIK/:/mydata:rw -it lpryszcz/redundan2 while read line ; do /root/src/redundans/redundans.py \\ --verbose \\ --fastq /mydata/00_trim_reads/&quot;${line}&quot;.R1.tr.fq.gz \\ /mydata/00_trim_reads/&quot;${line}&quot;.R2.tr.fq.gz \\ --fasta /mydata/03_assemblies/&quot;${line}&quot;.SPAdes.fa \\ --outdir /mydata/04_redundans/&quot;${line}&quot; \\ --threads 72 \\ --log /mydata/04_redundans/&quot;${line}&quot;.SPAdes.redundans.log done &lt; mydata/sample.lst ## Generate assembly stats for file in *redundans.fa; do perl ~/scripts/Nstat.pl $file &gt; $file.Nstat; done echo &quot;Sample&quot;$&#39;\\t&#39;&quot;Total length (bp)&quot;$&#39;\\t&#39;&quot;# contigs&quot;$&#39;\\t&#39;&quot;longest (bp)&quot;$&#39;\\t&#39;&quot;N50 (bp)&quot; \\ &gt; Vikings.assembly.stats.txt; for file in *.Nstat; do NAME=$(basename $file .SPAdes.redundans.fa.Nstat); LONGEST=$(tail $file | head -n 1 | tr &#39;:&#39; &#39;\\t&#39; | cut -f 1); TOT_LEN=$(grep &quot;Total length&quot; $file | sed &#39;s/Total length of sequence://g&#39;); NCONT=$(grep &quot;Total number&quot; $file | sed &#39;s/Total number of sequences://g&#39;); N50=$(grep &quot;N50 stats:&quot; $file | sed &#39;s/.*sequences &gt;= //g&#39;); echo $NAME$&#39;\\t&#39;$TOT_LEN$&#39;\\t&#39;$NCONT$&#39;\\t&#39;$LONGEST$&#39;\\t&#39;$N50; done |\\ sed &#39;s/ bp//g&#39; &gt;&gt; Vikings.assembly.stats.txt; done Despite being more or less fragmented, all assembled genomes are in the range of Saccharomyces sizes. Notable exceptions are: Granvin1 (???), Muri and k7R25 (which are S. cerevisiae, _ X S. eubayanus X S. uvarum triple hybrids). 3.2 Genome Annotation We will perform ab initio annotation of the assembled genomes with the MAKER pipeline. We will use Saccharomyces RepeatMasker to mask repetitive regions, ab intio gene models are predicted with SNAP and augustus with the corresponding S. cerevisiae HMM models, ORFs from S288C_reference_genome_R64-2-1_20150113 reference genome and 1011 S. cerevisiae genomes as ESTs evidences, proteins from S288C_reference_genome_R64-2-1_20150113 genome and the following yeast proteomes as proteins evidences. # run the MAKER pipeline for file in *.redundans.fa; do ~/bin/maker/bin/maker -genome $file \\ maker_bopts.ctl \\ maker_opts.ctl \\ maker_exe.ctl; done # summary of transcripts and proteins for DIR in *.maker.output; do ~/bin/maker/bin/fasta_merge -d ./$DIR/*master_datastore_index.log; ~/bin/maker/bin/gff3_merge -d ./$DIR/*master_datastore_index.log; done # create gene IDs for file in *.all.gff ; do ~/bin/maker/bin/maker_map_ids \\ --prefix $(basename $file | sed &#39;s/\\..*//g&#39;) \\ $file &gt; $(basename $file .gff).id.map; ~/bin/maker/bin/map_gff_ids \\ $(basename $file .gff).id.map \\ $file; ~/bin/maker/bin/map_fasta_ids \\ $(basename $file .gff).id.map \\ $(basename $file .gff).maker.transcripts.fasta; ~/bin/maker/bin/map_fasta_ids \\ $(basename $file .gff).id.map \\ $(basename $file .gff).maker.proteins.fasta; done ## Generate annotation stats echo &quot;Sample&quot;$&#39;\\t&#39;&quot;# Transcripts&quot;$&#39;\\t&#39;&quot;# Proteins&quot; &gt; Vikings.annotation.stats.txt; while read line; do NAME=$line; TRANS=$(grep &quot;&gt;&quot; $line.SPAdes.redundans.all.maker.transcripts.fasta | wc -l); PROT=$(grep &quot;&gt;&quot; $line.SPAdes.redundans.all.maker.proteins.fasta | wc -l); echo $NAME$&#39;\\t&#39;$TRANS$&#39;\\t&#39;$PROT &gt;&gt; Vikings.annotation.stats.txt; done &lt; ../sample.lst Below are the number of genes predicted for each de novo assembled farmhouse genome. 3.3 Identification of Farmhouse-specific Gene Families Do kveiks harbor kveik-specific gene families? To answer this question we build protein orthogroups using proteomes from Kveiks, 302 industrail strains (from Gallone et al.2019) and reference proteomes for S. cerevisiae, S. kudriavzevii, S. eubayanus, S. uvarum using the Orthofinder pipeline. This approach resulted to be successful for clustering HGT, so hopefully we can identify Orthogroups specific for kveik strains. # create Gene Families ~/bin/OrthoFinder-2.3.3/orthofinder -f 00_aa_start/ \\ -t 72 \\ -M msa \\ -S diamond \\ -A mafft \\ -T iqtree \\ -I 2 # filter for Orthogroups enriched for kveiks python3.8 Vikings.GeneFamiliesFilter.py \\ --in Vikings.Orthogroups.GeneCount.tsv \\ &gt; Vikings.Orthoclusters.counts.tab We select Orthogroups with 10 genes or more (6,811 out of 13,508 groups), and we look for gene families specific for kveiks or enriched in kveiks. # get yeasts gene families Orthogroups = read.delim(paste(mainDir, &quot;Vikings.Orthoclusters.counts.tab&quot;, sep = &quot;&quot;), header = FALSE) colnames(Orthogroups) = Orthogroups[1, ] rownames(Orthogroups) = Orthogroups$Orthogroups Orthogroups = Orthogroups[-which(Orthogroups$Orthogroup == &quot;Orthogroups&quot;), ] Orthogroups = Orthogroups[, -which(colnames(Orthogroups) == &quot;Orthogroups&quot;)] Orthogroups = dplyr::mutate_all(Orthogroups, function(x) as.numeric(as.character(x))) # drop columns if empty Orthogroups = Orthogroups[, colSums(Orthogroups != 0) &gt; 0] # reorder columns kveiks = c(&quot;14R30&quot;, &quot;14R6&quot;, &quot;16R23&quot;, &quot;16R37&quot;, &quot;17P5&quot;, &quot;19R18&quot;, &quot;1R16&quot;, &quot;21P1&quot;, &quot;21R38&quot;, &quot;27R17&quot;, &quot;28P1&quot;, &quot;28P6&quot;, &quot;28R21&quot;, &quot;28R33&quot;, &quot;28R8&quot;, &quot;2R23&quot;, &quot;38R16&quot;, &quot;39R20&quot;, &quot;3R11&quot;, &quot;40R14&quot;, &quot;40R1&quot;, &quot;40R20&quot;, &quot;41R10&quot;, &quot;41R15&quot;, &quot;42R20&quot;, &quot;42R31&quot;, &quot;44R32&quot;, &quot;44R7&quot;, &quot;45P5&quot;, &quot;45R11&quot;, &quot;46R12&quot;, &quot;46R37&quot;, &quot;6R15&quot;, &quot;7R7&quot;, &quot;8R19&quot;, &quot;9R40&quot;, &quot;Granvin1&quot;, &quot;Hornindal1&quot;, &quot;Hornindal2&quot;, &quot;k7R25&quot;, &quot;Laerdal2&quot;, &quot;Muri&quot;, &quot;SortdalEbbe1&quot;, &quot;Voss1&quot;) Orthogroups_k = Orthogroups[, which(colnames(Orthogroups) %in% kveiks)] Orthogroups_nk = Orthogroups[, -which(colnames(Orthogroups) %in% kveiks)] Orthogroups = cbind(Orthogroups_k, Orthogroups_nk) # plot heatmap ComplexHeatmap::Heatmap(Orthogroups, cluster_rows = TRUE, cluster_columns = FALSE, column_dend_reorder = TRUE, col = colorRamp2(c(-1, 0, 1), rev(brewer.pal(n = 3, name = &quot;RdBu&quot;))), na_col = &quot;grey75&quot;, show_row_names = FALSE, show_column_names = TRUE, show_row_dend = TRUE, show_heatmap_legend = FALSE, row_title = &quot;Orthogroups&quot;, column_title_side = &quot;bottom&quot;) Figure 3.1: Kveiks-specific gene families We could not identify no evidences for Farmhouse-specific Orthogroups. "],["horizontal-gene-transfer.html", "Chapter 4 Horizontal Gene Transfer 4.1 Taxonomic annotation of predicted genes 4.2 Evidence for bacterial HGT 4.3 Evidence for HGT from Ascomycota", " Chapter 4 Horizontal Gene Transfer To identify genuine Bacterial (or Fungal) Horizontal Gene Transfer, we apply the following protocol: sequence similarity search against non-redundant proteins database, including taxonomic annotations identify protein coding genes with best hits (top 5) to Bacterial proteins select assembled contigs where putative bacterial genes are discard short contigs with only one bacterial hit (Noise) if putative bacterial gene flanked by Eukaryotic genes, manual sequence similarity search to confirm a bona fide hit To have internal controls in this (and in the following analyses), we will add the ones of 18 S. cerevisiae industrial strains as well. 4.1 Taxonomic annotation of predicted genes For each predicted protein-coding gene, we can make a sequence similarity search against the non-redundant protein database at NCBI (nr). To assign the taxonomy id of the nr BLAST hit, we need the prot.accession2taxid.gz and nodes.dmp files provided by NCBI taxonomy. This can help us identify horizontal gene transfer and traces of contamination in the library prep of yeast samples. For each sample, first we do a blast search using DIAMOND, and then we associate to the protein_id of the top 5 best hits to the corresponding taxonomy the python library ete and customs scripts. BLAST is run against nr, excluding Saccharomyces cerevisiae, so that we can judge if the protein was present in other yeasts, or if it is indeed of bacterial origin. # BLAST search for file in *.all.maker.proteins.fasta; do ~/bin/DIAMOND/diamond blastp \\ --query $file \\ --db ~/taxonomy/nr \\ --taxonmap ~/taxonomy/prot.accession2taxid.gz \\ --taxonnodes ~/taxonomy/nodes.dmp \\ --threads 70 \\ --sensitive \\ --max-target-seqs 5 \\ --outfmt 6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore staxids &gt; $file.diamond done # BLAST to taxid for file in *.diamond; do ~/anaconda_ete/bin/python3.6 Vikings.tax.topath.py --input $file &gt; $file.tax done for file in *.tax ; do while read line ; do grep $line $file | cut -f 1,5; echo; done &lt; &lt;(grep Bacteria $file | cut -f 1 | sort -u) &gt; $file.bact done Now we have the full taxonomic annotation of the five best hits for each of the protein coding genes we annotated on the kveiks. 4.2 Evidence for bacterial HGT # filter annot.gff files for file in *.gff ; do grep CDS $file &gt; $(basename $file .gff).CDSonly.gff; gzip $file; done # identify putative bacterial genes and the assembled contigs harbouring them for file in *.tax; do cut -f 1,5 $file &gt; $file.all; done for file in *.all; do grep Bact $file &gt; $(basename $file .all).bact; done for file in *.bact; do while read line; do if [[ $line = &quot;&quot; ]]; then continue; else GENE=$(echo $line | cut -d &quot; &quot; -f 1 ); CHR=$(grep &quot;${GENE}&quot; $(basename $file .maker.proteins.fasta.diamond.tax.bact).CDSonly.gff | cut -f 1 ); grep &quot;${CHR}&quot; $(basename $file .bact).all \\ | uniq \\ | grep -C5 &quot;${GENE}&quot; \\ | grep -v &quot;${GENE}&quot; \\ &gt;&gt; $(basename $file .maker.proteins.fasta.diamond.tax.bact).&quot;${GENE}&quot;.tmp; fi; done &lt; &lt;(cut -f 1 $file | sort -u); done # pull the putative bacterial contigs for file in *.bact; do cut -f 1 $file | sort -u &gt; $file.lst; perl ~/scripts/SelectList_Fasta.pl \\ $(basename $file .diamond.tax.bact) \\ $file.lst \\ &gt; $file.fa; done # check if putative bacterial transcripts are flanked by Euk genes python3.6 Vikings.check_eukbact_contigs.1.py --input ../samples.lst for file in *HGT.table; do uniq $file &gt; temp; mv temp $file ; done for file in *HGT.table; do python3 ../Vikings.Bactmatch.py --input $file | cut -f 2 &gt; temp; cp temp temp2; paste temp temp2 | sed &#39;s/\\t/\\|\\&gt;/g&#39; &gt; $file.lst; rm temp temp2; done for file in *HGT.table.lst; do perl ~/scripts/SelectList_Fasta.pl \\ $(basename $file .HGT.table.lst).bact.fa \\ $file \\ &gt; $(basename $file .lst).fa; done THERE ARE NO EVIDENCES FOR SIGNIFICANT BACTERIAL HORIZONTAL GENE TRANSFER. 4.3 Evidence for HGT from Ascomycota We can check the presence of fungal non-Saccharomyces genes and operons starting from the DIAMOND blast results we have. # Select non Saccharomyces genes # filter for genes with no top hits to Saccharomyces for file in *tax; do grep Ascomycota $file | grep -v Saccharomyces &gt; $file.Asco; while read line; do grep $line $file &gt; $file.Asco.all; if [[ $(grep $line $file | grep Saccharomyces) ]]; then continue; else echo $line; fi; done &lt; &lt;(cut -f 1 $file.Asco | sort -u) &gt; $file.Asco.candidates; done # retrieve fasta sequences for file in *candidates; do perl ~/scripts/SelectList_Fasta.pl \\ ../../11_domestication/00_prot_DB/$(basename $file .diamond.tax.Asco.candidates) \\ $file &gt; $file.fa; done # generate table stats for i in 2 3; do wc -l *candidates \\ | sed &quot;s/.SPAdes.*//g&quot; \\ | sed &quot;s/.aa.*//g&quot; \\ | sed &quot;s/.contigs.*//g&quot; \\ | grep -v total \\ | sed &quot;s/ / /g&quot; \\ | sed &quot;s/ / /g&quot; \\ | cut -f $i -d &quot; &quot; \\ &gt; temp.$i; done; paste temp.3 temp.2 &gt; Vikings.Asco.HGT.stats; # clean up rm temp.2 temp.3 Kveik strains seems to have a significant higher number of Ascomycetes genes than the other industrial strains analysed. Are there additional proteins shared between all the kveiks (or by some kveiks with same geographical origin?). We can group these proteins in gene families and see if we see a common pattern. If not, we can BLAST back the proteins and see which specific genes have been acquired. # group candidates in gene families ~/bin/OrthoFinder-2.3.3/orthofinder -f ./ \\ -t 20 \\ -M msa \\ -S diamond \\ -A mafft \\ -T iqtree \\ -I 2 From OrthoFinder output we can identify 49 orthogroups containing four genes or more. We visualize them as heatmap, anc we can see that kveiks strains have a higher number of common additional orthogroups that are absent from S288C and industrial strains. Interestingly, the distribution pattern does not seem to overlap with the geographical isolation of the kveik culture. # import table heatfile = read.delim(paste(mainDir, &quot;Vikings.Asco.HGT.heatmap.tab&quot;, sep = &quot;&quot;), header = FALSE) heatfile$V2 = stringr::str_replace_all(heatfile$V2, &quot;x&quot;, &quot;X&quot;) heatfile = heatfile[which(heatfile$V2 %in% c(&quot;X1002&quot;, &quot;X1014&quot;, &quot;X1030&quot;, &quot;X1129&quot;, &quot;X5508&quot;, &quot;X1007&quot;, &quot;X1118&quot;, &quot;X1148&quot;, &quot;X1046&quot;, &quot;X4037&quot;, &quot;X4051&quot;, &quot;Voss1&quot;, &quot;SortdalEbbe1&quot;, &quot;Muri&quot;, &quot;Laerdal2&quot;, &quot;k7R25&quot;, &quot;Hornindal2&quot;, &quot;Hornindal1&quot;, &quot;Granvin1&quot;, &quot;9R40&quot;, &quot;8R19&quot;, &quot;7R7&quot;, &quot;6R15&quot;, &quot;46R37&quot;, &quot;46R12&quot;, &quot;45R11&quot;, &quot;45P5&quot;, &quot;44R7&quot;, &quot;44R32&quot;, &quot;42R31&quot;, &quot;42R20&quot;, &quot;41R15&quot;, &quot;41R10&quot;, &quot;40R20&quot;, &quot;40R1&quot;, &quot;40R14&quot;, &quot;3R11&quot;, &quot;39R20&quot;, &quot;38R16&quot;, &quot;2R23&quot;, &quot;28R8&quot;, &quot;28R33&quot;, &quot;28R21&quot;, &quot;28P6&quot;, &quot;28P1&quot;, &quot;27R17&quot;, &quot;21R38&quot;, &quot;21P1&quot;, &quot;1R16&quot;, &quot;19R18&quot;, &quot;17P5&quot;, &quot;16R37&quot;, &quot;16R23&quot;, &quot;14R6&quot;, &quot;14R30&quot;)), ] # relevel heatfile$V2 = factor(heatfile$V2, levels = c(&quot;41R10&quot;, &quot;21R38&quot;, &quot;9R40&quot;, &quot;17P5&quot;, &quot;SortdalEbbe1&quot;, &quot;3R11&quot;, &quot;21P1&quot;, &quot;41R15&quot;, &quot;Hornindal1&quot;, &quot;Hornindal2&quot;, &quot;1R16&quot;, &quot;2R23&quot;, &quot;8R19&quot;, &quot;Muri&quot;, &quot;k7R25&quot;, &quot;38R16&quot;, &quot;44R32&quot;, &quot;19R18&quot;, &quot;44R7&quot;, &quot;6R15&quot;, &quot;Laerdal2&quot;, &quot;7R7&quot;, &quot;14R6&quot;, &quot;14R30&quot;, &quot;27R17&quot;, &quot;28P1&quot;, &quot;28P6&quot;, &quot;28R21&quot;, &quot;28R33&quot;, &quot;28R8&quot;, &quot;42R20&quot;, &quot;42R31&quot;, &quot;45P5&quot;, &quot;45R11&quot;, &quot;46R12&quot;, &quot;46R37&quot;, &quot;16R23&quot;, &quot;16R37&quot;, &quot;39R20&quot;, &quot;40R14&quot;, &quot;40R1&quot;, &quot;40R20&quot;, &quot;Granvin1&quot;, &quot;Voss1&quot;, &quot;X1002&quot;, &quot;X1014&quot;, &quot;X1030&quot;, &quot;X1129&quot;, &quot;X5508&quot;, &quot;X1007&quot;, &quot;X1118&quot;, &quot;X1148&quot;, &quot;X1046&quot;, &quot;X4037&quot;, &quot;X4051&quot;)) # set color labels col_label = fills = c(&quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#0571B0&quot;, &quot;#92C5DE&quot;, &quot;#92C5DE&quot;, &quot;#92C5DE&quot;, &quot;#92C5DE&quot;, &quot;#92C5DE&quot;, &quot;#92C5DE&quot;, &quot;#92C5DE&quot;, &quot;#92C5DE&quot;, &quot;#92C5DE&quot;, &quot;#92C5DE&quot;, &quot;#008470&quot;, &quot;#008470&quot;, &quot;#008470&quot;, &quot;#008470&quot;, &quot;#008470&quot;, &quot;#008470&quot;, &quot;#FFDA00&quot;, &quot;#FFDA00&quot;, &quot;#FFDA00&quot;, &quot;#FFDA00&quot;, &quot;#FBA01D&quot;, &quot;#FBA01D&quot;, &quot;#FBA01D&quot;, &quot;#FBA01D&quot;, &quot;#A6611A&quot;, &quot;#A6611A&quot;, &quot;#A6611A&quot;, &quot;#A6611A&quot;, &quot;grey75&quot;, &quot;grey75&quot;, &quot;#51CD34&quot;, &quot;#51CD34&quot;, &quot;#51CD34&quot;, &quot;#51CD34&quot;, &quot;#51CD34&quot;, &quot;#51CD34&quot;, &quot;#2E97E6&quot;, &quot;#2E97E6&quot;, &quot;#2E97E6&quot;, &quot;#2E97E6&quot;, &quot;#2E97E6&quot;, &quot;#2E97E6&quot;, &quot;#F2BA00&quot;, &quot;#F2BA00&quot;, &quot;#F2BA00&quot;, &quot;#F2BA00&quot;, &quot;#F2BA00&quot;, &quot;#F2BA00&quot;, &quot;#F2BA00&quot;, &quot;#F2BA00&quot;) # prepare heatmap ggplot(heatfile) + geom_tile(aes(x = V1, y = V2, fill = V3), color = &quot;grey75&quot;) + scale_fill_gradientn(na.value = &quot;white&quot;, limits = c(0, 2), colours = c(&quot;white&quot;, &quot;steelblue&quot;, &quot;steelblue&quot;), breaks = c(0, 1, 2)) + coord_cartesian(expand = FALSE) + labs(fill = &quot;Gene presence&quot;, y = &quot;Strain&quot;, x = &quot;Orthologous groups&quot;) + theme(axis.title = element_text(size = 16), axis.text.x = element_text(angle = 90, hjust = 0.95, vjust = 0.5), axis.text.y = element_text(size = 16, colour = col_label), legend.position = &quot;none&quot;, panel.border = element_rect(colour = &quot;black&quot;, fill = NA, size = 0.75)) + annotate(xmin = 25.5, xmax = 32.5, ymin = -Inf, ymax = Inf, geom = &quot;rect&quot;, alpha = 0, colour = &quot;red&quot;, linewidth = 1.5) Figure 4.1: Ascomycota HTG orthogroup candidates Very well. Now, what are the gene families that are transferred to kveiks strains? Are they genuine HGT, or it is just artifacts from heuristic sequence similarity search? Lets do manual BLAST to NCBI for the Orthogroups and see what pops up. We can clearly identify two operons (OG0000024-OG0000031) that were transferred from Zygosaccharomzces parabailli to kveik strains 16R37, 42R31, 45P5, 45R11 and 46R37. These strains come all from a small geographic area (Latvia [42R31, 45P5, 45R11] and Lithuania [16R37, 46R37]), suggesting a common origin of the HGT event that then spread. Interestingly, other isolates from the same culture (i.e.: 16R23, 42R20, 46R12) do not present such a HGT, supporting the idea of heterogeneous kvieks cultures. 4.3.1 Zygosaccharomyces parabailli transferred operon The transferred operons code for the genes: YNR058W, YHR204W, YHR205W, YHR206W, YHR207C, YHR208W, YER182W, YER183C. 4.3.1.1 Overrepresented GO BP terms ### run over-represented analysis enriched_GOs = enrichGO(gene = HGT_genes$ENTREZ, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;BP&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) # print table DT::datatable(enriched_GOs@result[which(enriched_GOs@result$p.adjust &lt;= 0.05), ], extensions = c(&quot;FixedColumns&quot;, &quot;FixedHeader&quot;), caption = &quot;Overrepresented BP terms in Zygosaccharomzces parabailli transferred operon&quot;, options = list(scrollX = TRUE, paging = TRUE, fixedHeader = FALSE)) # plot GO dotplot p0 = enrichplot::dotplot(enriched_GOs, showCategory = nrow(enriched_GOs@result)) + ggtitle(&quot;Zygosaccharomzces parabailli transferred operon over-represented GO BP terms sets&quot;) + scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, &quot;Reds&quot;))(37))) + guides(colour = guide_colorbar(reverse = TRUE)) + theme(plot.title = element_text(size = 22, hjust = 0.5), legend.position = &quot;bottom&quot;, strip.background = element_rect(fill = &quot;grey85&quot;, colour = &quot;black&quot;), strip.text = element_text(size = 12)) print(p0) Figure 4.2: Dotplot of overrepresented BP terms in Zygosaccharomzces parabailli transferred operon # plot GO network p1 = goplot(enriched_GOs) + scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, &quot;Reds&quot;))(37))) + labs(title = &quot;Zygosaccharomzces parabailli transferred operon over-represented GO BP terms sets&quot;) + theme(plot.title = element_text(size = 20, hjust = 0.5)) print(p1) Figure 4.3: Network of overrepresented BP terms in Zygosaccharomzces parabailli transferred operon 4.3.1.2 Overrepresented GO CC terms ### run over-represented analysis enriched_GOs = enrichGO(gene = HGT_genes$ENTREZ, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;CC&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) 4.3.1.3 Overrepresented GO MF terms ### run over-represented analysis enriched_GOs = enrichGO(gene = HGT_genes$ENTREZ, universe = GO_universe, OrgDb = ref_DB_list[[1]], ont = &quot;MF&quot;, pAdjustMethod = &quot;BH&quot;, pvalueCutoff = 0.05, qvalueCutoff = 0.05) # print table DT::datatable(enriched_GOs@result[which(enriched_GOs@result$p.adjust &lt;= 0.05), ], extensions = c(&quot;FixedColumns&quot;, &quot;FixedHeader&quot;), caption = &quot;Overrepresented MF terms in Zygosaccharomzces parabailli transferred operon&quot;, options = list(scrollX = TRUE, paging = TRUE, fixedHeader = FALSE)) # plot GO dotplot p0 = enrichplot::dotplot(enriched_GOs, showCategory = nrow(enriched_GOs@result)) + ggtitle(&quot;Zygosaccharomzces parabailli transferred operon over-represented GO MF terms sets&quot;) + scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, &quot;Reds&quot;))(37))) + guides(colour = guide_colorbar(reverse = TRUE)) + theme(plot.title = element_text(size = 22, hjust = 0.5), legend.position = &quot;bottom&quot;, strip.background = element_rect(fill = &quot;grey85&quot;, colour = &quot;black&quot;), strip.text = element_text(size = 12)) print(p0) Figure 4.4: Dotplot of overrepresented MF terms in Zygosaccharomzces parabailli transferred operon # plot GO network p1 = goplot(enriched_GOs) + scale_colour_gradientn(colours = rev(colorRampPalette(brewer.pal(7, &quot;Reds&quot;))(37))) + labs(title = &quot;Zygosaccharomzces parabailli transferred operon over-represented GO MF terms sets&quot;) + theme(plot.title = element_text(size = 20, hjust = 0.5)) print(p1) Figure 4.5: Network of overrepresented MF terms in Zygosaccharomzces parabailli transferred operon 4.3.1.4 Overrepresented Reactome Pathways # over-represented PA enrichedPA = ReactomePA::enrichPathway(gene = HGT_genes$ENTREZ, pvalueCutoff = 0.05, organism = ref_DB_list[[2]]) "],["phylogenetic-reconstruction.html", "Chapter 5 Phylogenetic reconstruction 5.1 Identify quasi single-copy genes 5.2 Run phylogenetic reconstruction", " Chapter 5 Phylogenetic reconstruction 5.1 Identify quasi single-copy genes Uniform header sequences, since they come from multiple sources and they are all messed up and incosistent. # rename protein sequences for file in *maker.aa.fa; do NAME=$(basename $file .maker.aa.fa)_; sed -i &quot;s/&gt;/&gt;$NAME/g&quot; $file; done for file in *[0-9].aa.fa; do NAME=$(basename $file .aa.fa)_; sed -i &quot;s/&gt;/&gt;$NAME/g&quot; $file; done # concatenate all files together cat *.aa.fa &gt; all_plusKV.aa.fa We will create a set of non-redundant S. cerevisiae proteins, by clustering them based on a 70% sequence similarity groups. # cluster sequences cd-hit -i all_plusKV.aa.fa -o all_plusKV.aa.0.7.fa -T 24 -M 16000 -c 0.7 -d 60 We now check protein clusters having only a single copy gene per yeast strain. # filter clusters into small one gene ortholog clusters python3.5 Vikings.filterCDHITclusters.py --clstr all_plusKV.aa.0.7.fa.clstr # clean folder mkdir -p 01_filter_clusters/01_clusters_311-350 mkdir -p 01_filter_clusters/02_clusters_311-350_noDuplicates mv all_plusKV.aa.0.7.fa.clstr.fltr.clstr.* 01_filter_clusters # remove duplicated genes from orthologs clusters python3.5 Vikings.filterCDHITclustersDeduplicates.py \\ --indir 01_filter_clusters/01_clusters_311-350 \\ --outdir 01_filter_clusters/02_clusters_311-350_noDuplicate # retrieve amino acid sequences mkdir -p 01_filter_clusters/03_clusters_aa # format headers sed -i &#39;s/ .*//g&#39; ../all_plusKV.aa.fa sed -i &#39;s/|.*//g&#39; ../all_plusKV.aa.fa &amp; for file in 02_clusters_311-350_noDuplicates/*; do sed -i &#39;s/|.*//g&#39; $file ; done python3.5 Vikings.CDHITclustersList2ntSeq.py \\ --fasta all_plusKV.aa.fa \\ --indir ./01_filter_clusters/02_clusters_311-350_noDuplicates/ \\ --outdir ./01_filter_clusters/03_clusters_aa/ 5.1.1 Create animo acid and codon alignments Prepare nucleotidic sequences mkdir 02_nt_start/ # reformat the header to match aa for file in *.fa; do STRAIN=$(basename $file | tr &#39;.&#39; &#39; &#39; | cut -f 1 -d &quot; &quot;); sed -i &#39;s/ .*//g&#39; $file; sed -i &#39;s/|.*//g&#39; $file; sed -i &#39;s/&gt;/&gt;_/g&#39; $file; sed -i &quot;s/&gt;/&gt;$STRAIN/g&quot; $file; done # select nt per cluster cat *.fa &gt; ../all_plusKV.nt.fa # correct worng headers sed -i &#39;s/Skudr_Skudr/Skudr/g&#39; all_plusKV.nt.fa; sed -i &#39;s/Suvar_Suvar/Suvar/g&#39; all_plusKV.nt.fa; sed -i &#39;s/Seuba_Seuba/Seuba/g&#39; all_plusKV.nt.fa mkdir 03_nt_clusters # cluster NT cd-hit -T 72 -c 0.98 -aL 0.95 -d 0 -i all_plusKV.nt.fa -o all_plusKV.nt.098.fa # extract cluster gene lists python3.5 Vikings.filterCDHITclusters.nt.py --clstr all_plusKV.nt.098.fa.clstr # select genes cat gene.lst \\ | xargs -n 1 -P 64 -I {} sh -c \\ &#39;echo {}; \\ for file in 00_nt_clusters_lst/*.clstr.*; do if grep -q {} $file; then cp $file 00_nt_clusters_lst_select; fi; done&#39; # add Hittinger IDs for file in 99_Hittinger/coding/*.fsa; do grep &quot;&gt;&quot; $file \\ | sed &#39;s/&gt;//g&#39; \\ &gt; 99_Hittinger/geneList/$(basename $file .fsa).lst; done python3.5 Vikings.addHittingerID.py \\ --CDlists 01_nt_clusters_lst_select \\ --Hit 99_Hittinger/geneList/ \\ --outdir 02_nt_clusters_lst_select_Hittinger cat all_plusKV.aa.fa 99_Hittinger/coding/*.aa.mfa &gt; all_plusKV.Hit.aa.fa cat all_plusKV.nt.fa 99_Hittinger/coding/*.fsa &gt; all_plusKV.Hit.nt.fa for file in 02_nt_clusters_lst_select_Hittinger/*.Hit; do sed -i &#39;s/ .*//g&#39; $file ; done # select aa for each cluster python3.5 Vikings.CDHITclustersList2ntSeq.py \\ --fasta all_plusKV.Hit.aa.fa \\ --indir ./02_nt_clusters_lst_select_Hittinger \\ --outdir ./03_aa_clusters/ # align aa clusters ls ./03_aa_clusters/ \\ | xargs -n 8 -P 8 -I {} sh -c \\ &#39;mafft --localpair --maxiterate 1000 --ep 0.123 --thread 8 ./03_aa_clusters/{} &gt; ./04_aa_clusters_aln/{}.aln.fa&#39; for file in ./04_aa_clusters_aln/*.fa; do perl ~/rubbish/00_Brigida_starting_files/pal2nal.v14/pal2nal.pl \\ $file 05_nt_clusters/$(basename $file .aln.fa)\\ -output fasta \\ &gt; 06_nt_clusters_aln/$(basename $file .fa).fa; done # rename headers to keep only strain name find 05_nt_align_long/* | xargs -n 1 -P 64 sed -i &#39;s/_.*//g&#39; mkdir ../07_nt_aln_ready; for file in ./*; do NAME=$(grep S288C $file | sed &#39;s/&gt;S288C_//g&#39;); cp $file ../07_nt_aln_ready/$NAME.nt.aln.fa; done # rename headers to keep only strain name find 07_nt_aln_ready/* | xargs -n 1 -P 64 sed -i &#39;s/_.*//g&#39; 5.2 Run phylogenetic reconstruction This resulted in 155 single-copy genes identified across 151 yeast strains of Gallone et al.2016 and the 44 kveiks strains in this study. Lets build a Maximum Likelihood tree to reconstruct the phylogenetic relationships between these S. cerevisiae yeast strains! # concatenate alignmnets mkdir 08_concatenated_ML perl catfasta2phyml.pl \\ --fasta \\ --concatenate 07_nt_aln_ready/*.fa \\ &gt; 08_concatenated_ML/clstr.all.concat.nt.align.fa # ML analysis on concatenated alignment ~/bin/iqtree-1.6.8-Linux/bin/iqtree \\ -s clstr.all.concat.nt.align.fa \\ -st CODON \\ -pre clstr.all.concat.nt.align \\ -nt 52 \\ -wbt \\ -bb 1000 \\ -alrt 1000 \\ -m MG+F1X4 Plot the reconstructed phylogenetic tree. # load tree best_tree = read.tree(paste(mainDir, &quot;genetrees.output.BS.best.tre&quot;, sep = &quot;&quot;)) best_tree = as.phylo(best_tree) best_tree$node.label = as.numeric(as.character(best_tree$node.label)) best_tree = ape::root(best_tree, which(best_tree$tip.label %in% c(&quot;Skud&quot;)), edgelabel = TRUE) best_tree = ladderize(best_tree, right = TRUE) # load annotations tree_annot_raw = read.table(paste(mainDir, &quot;genetrees.output.BS.annot.txt&quot;, sep = &quot;&quot;), sep = &quot;\\t&quot;, header = TRUE, stringsAsFactors = FALSE) tree_annot_raw = data.frame(tree_annot_raw) tree_annot_raw$Origin = factor(tree_annot_raw$Origin, levels = c(&quot;North-West Norway&quot;, &quot;Eastern Norway&quot;, &quot;South-West Norway&quot;, &quot;Latvia&quot;, &quot;Lithuania&quot;, &quot;Russia&quot;, &quot; &quot;)) # plot p = ggtree(best_tree, layout = &quot;fan&quot;, open.angle = 0) + geom_tiplab2(offset = 3, size = 2.75) + geom_nodepoint(aes(fill = cut(as.numeric(label), c(0, 70, 90, 100))), shape = 21, size = 2) + theme_tree(legend.position = c(0.1, 0.55)) + scale_fill_manual(values = c(&quot;white&quot;, &quot;grey&quot;, &quot;black&quot;), guide = &quot;legend&quot;, name = &quot;Bootstrap&quot;, breaks = c(&quot;(90,100]&quot;, &quot;(70,90]&quot;, &quot;(0,70]&quot;), labels = expression(BP&gt;=90,70 &lt;= BP * &quot; &lt; 90&quot;, BP &lt; 70)) p = flip(p, 250, 317) p1 = p + new_scale_fill() + geom_fruit(data = tree_annot_raw, geom = geom_tile, mapping = aes(y = Strain, fill = Clade), color = NA, offset = 0.04, size = 0.02) + scale_fill_manual(values = c(&#39;#e6194b&#39;, &#39;#3cb44b&#39;, &#39;#ffe119&#39;, &#39;#4363d8&#39;, &#39;#f58231&#39;, &#39;#911eb4&#39;, &#39;#46f0f0&#39;, &#39;#f032e6&#39;, &#39;#bcf60c&#39;, &#39;#fabebe&#39;, &#39;#008080&#39;, &#39;#e6beff&#39;, &#39;#9a6324&#39;, &#39;#fffac8&#39;, &#39;#800000&#39;, &#39;#aaffc3&#39;, &#39;#808000&#39;, &#39;#ffd8b1&#39;, &#39;#000075&#39;, &#39;#808080&#39;, &#39;#ffffff&#39;, &#39;#000000&#39;)) p2 = p1 + new_scale_fill() + geom_fruit(data = tree_annot_raw, geom = geom_tile, mapping = aes(y = Strain, fill = Origin), color = NA, offset = 0.06, size = 0.02) + scale_fill_manual(values = c(&#39;#03045e&#39;, &#39;#0077b6&#39;, &#39;#00b4d8&#39;, &#39;#808000&#39;, &#39;#aaffc3&#39;, &#39;#800000&#39;, &#39;#ffffff&#39;)) + theme(legend.position = c(1.1, 0.5)) p2 Figure 5.1: Farmhouse yeasts phynogenetic recontruction "],["variant-calling.html", "Chapter 6 Variant Calling 6.1 Variant Calling 6.2 Heterozigous positions 6.3 LOH 6.4 Population Structure", " Chapter 6 Variant Calling 6.1 Variant Calling 6.2 Heterozigous positions 6.3 LOH 6.4 Population Structure "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
